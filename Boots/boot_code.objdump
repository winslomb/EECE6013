
boot_code.elf:     file format elf32-littlenios2
boot_code.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000210

Program Header:
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x00000000 align 2**12
         filesz 0x00000210 memsz 0x00000210 flags r-x
    LOAD off    0x00002210 vaddr 0x00000210 paddr 0x00000210 align 2**12
         filesz 0x000024d0 memsz 0x000024d0 flags r-x
    LOAD off    0x000046e0 vaddr 0x000026e0 paddr 0x00003e6c align 2**12
         filesz 0x0000178c memsz 0x0000178c flags rw-
    LOAD off    0x000065f8 vaddr 0x000055f8 paddr 0x000055f8 align 2**12
         filesz 0x00000000 memsz 0x00000120 flags rw-
    LOAD off    0x00006000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00006000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  08000020  00000000  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00002414  00000210  00000210  00002210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000bc  00002624  00002624  00004624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000178c  000026e0  00003e6c  000046e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000120  000055f8  000055f8  000065f8  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  00005718  00005718  00006020  2**0
                  CONTENTS
  7 .Onchip_SRAM  00000000  08000230  08000230  00006020  2**0
                  CONTENTS
  8 .Onchip_SRAM_2 00000000  09000000  09000000  00006020  2**0
                  CONTENTS
  9 .comment      00000039  00000000  00000000  00006020  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 000005b8  00000000  00000000  00006060  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   000075da  00000000  00000000  00006618  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000029af  00000000  00000000  0000dbf2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00002c88  00000000  00000000  000105a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000a74  00000000  00000000  0001322c  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00001c18  00000000  00000000  00013ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    000008d3  00000000  00000000  000158b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_alt_sim_info 00000010  00000000  00000000  0001618c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 000000b8  00000000  00000000  000161a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .thread_model 00000003  00000000  00000000  00017ed7  2**0
                  CONTENTS, READONLY
 20 .cpu          00000005  00000000  00000000  00017eda  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  00017edf  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  00017ee0  2**0
                  CONTENTS, READONLY
 23 .sysid_hash   00000004  00000000  00000000  00017ee1  2**0
                  CONTENTS, READONLY
 24 .sysid_base   00000004  00000000  00000000  00017ee5  2**0
                  CONTENTS, READONLY
 25 .sysid_time   00000004  00000000  00000000  00017ee9  2**0
                  CONTENTS, READONLY
 26 .stderr_dev   00000009  00000000  00000000  00017eed  2**0
                  CONTENTS, READONLY
 27 .stdin_dev    00000009  00000000  00000000  00017ef6  2**0
                  CONTENTS, READONLY
 28 .stdout_dev   00000009  00000000  00000000  00017eff  2**0
                  CONTENTS, READONLY
 29 .sopc_system_name 0000000b  00000000  00000000  00017f08  2**0
                  CONTENTS, READONLY
 30 .quartus_project_dir 0000000f  00000000  00000000  00017f13  2**0
                  CONTENTS, READONLY
 31 .jdi          00006a7c  00000000  00000000  00017f22  2**0
                  CONTENTS, READONLY
 32 .sopcinfo     00083c2e  00000000  00000000  0001e99e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
00000210 l    d  .text	00000000 .text
00002624 l    d  .rodata	00000000 .rodata
000026e0 l    d  .rwdata	00000000 .rwdata
000055f8 l    d  .bss	00000000 .bss
00005718 l    d  .SDRAM	00000000 .SDRAM
08000230 l    d  .Onchip_SRAM	00000000 .Onchip_SRAM
09000000 l    d  .Onchip_SRAM_2	00000000 .Onchip_SRAM_2
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 bsp//obj/HAL/src/crt0.o
00000248 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 boot_code.c
00000000 l    df *ABS*	00000000 alt_load.c
0000039c l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
000004f8 l     F .text	00000038 alt_dev_reg
000026e0 l     O .rwdata	00001060 JTAG_UART
00003740 l     O .rwdata	0000002c Dip_Switches
0000376c l     O .rwdata	0000002c Expansion_JP1
00003798 l     O .rwdata	0000002c Expansion_JP2
000037c4 l     O .rwdata	0000002c Expansion_JP3
000037f0 l     O .rwdata	0000002c Expansion_JP3_In
0000381c l     O .rwdata	0000002c Green_LEDs
00003848 l     O .rwdata	0000002c Pushbuttons
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00000830 l     F .text	00000200 altera_avalon_jtag_uart_irq
00000a30 l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00001048 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00001280 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000013bc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000013e8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000015ac l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
000018b4 l     F .text	00000050 alt_get_errno
00001904 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
00003a1c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
00005610 g     O .bss	00000004 alt_instruction_exception_handler
00000480 g     F .text	00000078 alt_main
00005618 g     O .bss	00000100 alt_irq
00003e6c g       *ABS*	00000000 __flash_rwdata_start
00001d70 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
08000000 g     F .entry	0000000c __reset
00000000 g       *ABS*	00000000 __flash_exceptions_start
00005614 g     O .bss	00000004 errno
000055fc g     O .bss	00000004 alt_argv
0000be40 g       *ABS*	00000000 _gp
0000389c g     O .rwdata	00000180 alt_fd_list
00001d90 g     F .text	00000090 alt_find_dev
00002170 g     F .text	0000010c memcpy
0000168c g     F .text	00000078 alt_io_redirect
00002624 g       *ABS*	00000000 __DTOR_END__
00002008 g     F .text	000000a0 alt_exception_cause_generated_bad_addr
00000c28 g     F .text	00000208 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00003e50 g     O .rwdata	00000004 alt_max_fd
00001704 g     F .text	000001b0 alt_irq_register
00003e64 g     O .rwdata	00000004 _global_impure_ptr
00005718 g       *ABS*	00000000 __bss_end
00001c6c g     F .text	00000104 alt_tick
00001bd4 g     F .text	00000098 alt_alarm_stop
00005604 g     O .bss	00000004 alt_irq_active
080000fc g     F .exceptions	000000d4 alt_irq_handler
00003874 g     O .rwdata	00000028 alt_dev_null
09000000 g       *ABS*	00000000 __alt_mem_Onchip_SRAM_2
000013a0 g     F .text	0000001c alt_dcache_flush_all
00003e6c g       *ABS*	00000000 __ram_rwdata_end
00003e48 g     O .rwdata	00000008 alt_dev_list
000026e0 g       *ABS*	00000000 __ram_rodata_end
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
00005718 g       *ABS*	00000000 end
0000077c g     F .text	000000b4 altera_avalon_jtag_uart_init
080001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
00002624 g       *ABS*	00000000 __CTOR_LIST__
02000000 g       *ABS*	00000000 __alt_stack_pointer
000010c0 g     F .text	00000080 alt_avalon_timer_sc_init
00000e30 g     F .text	00000218 altera_avalon_jtag_uart_write
00002424 g     F .text	000001a4 __call_exitprocs
00000210 g     F .text	0000003c _start
00005608 g     O .bss	00000004 _alt_tick_rate
0000560c g     O .bss	00000004 _alt_nticks
00000564 g     F .text	000000b4 alt_sys_init
00002308 g     F .text	0000011c __register_exitproc
00000ad4 g     F .text	00000068 altera_avalon_jtag_uart_close
000025c8 g     F .text	00000028 .hidden __mulsi3
000026e0 g       *ABS*	00000000 __ram_rwdata_start
00002624 g       *ABS*	00000000 __ram_rodata_start
00000618 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00001f34 g     F .text	000000d4 alt_get_fd
000020f4 g     F .text	0000007c memcmp
000006d8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00005718 g       *ABS*	00000000 __alt_stack_base
00000728 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00001e20 g     F .text	00000114 alt_find_file
00001438 g     F .text	000000a0 alt_dev_llist_insert
000055f8 g       *ABS*	00000000 __bss_start
0000024c g     F .text	000000b4 main
00005600 g     O .bss	00000004 alt_envp
00000678 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00003e54 g     O .rwdata	00000004 alt_errno
00000300 g     F .text	0000009c sweep
00002624 g       *ABS*	00000000 __CTOR_END__
00002624 g       *ABS*	00000000 __flash_rodata_start
00002624 g       *ABS*	00000000 __DTOR_LIST__
00000530 g     F .text	00000034 alt_irq_init
00001b54 g     F .text	00000080 alt_release_fd
000020a8 g     F .text	00000014 atexit
00003e68 g     O .rwdata	00000004 _impure_ptr
000055f8 g     O .bss	00000004 alt_argc
00001534 g     F .text	0000005c _do_dtors
08000020 g       .exceptions	00000000 alt_irq_entry
00003e40 g     O .rwdata	00000008 alt_fs_list
08000020 g       *ABS*	00000000 __ram_exceptions_start
00003e6c g       *ABS*	00000000 _edata
00005718 g       *ABS*	00000000 _end
08000230 g       *ABS*	00000000 __ram_exceptions_end
00000b3c g     F .text	000000ec altera_avalon_jtag_uart_ioctl
08000000 g       *ABS*	00000000 __alt_mem_Onchip_SRAM
000020bc g     F .text	00000038 exit
02000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
000025f0 g     F .text	00000034 _exit
00001140 g     F .text	00000140 alt_alarm_start
0000227c g     F .text	0000008c strlen
000019f8 g     F .text	0000015c open
00001590 g     F .text	0000001c alt_icache_flush_all
00003e58 g     O .rwdata	00000004 alt_priority_mask
00003e5c g     O .rwdata	00000008 alt_alarm_list
000014d8 g     F .text	0000005c _do_ctors
000012d0 g     F .text	000000d0 close
00000400 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

08000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
 8000004:	08408414 	ori	at,at,528
    jmp r1
 8000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000fc0 	call	80000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000706 	br	80000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 800008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 8000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 8000098:	80001d00 	call	80001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 800009c:	1000021e 	bne	r2,zero,80000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 80000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 80000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 80000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 80000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000f8:	ef80083a 	eret

080000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000fc:	defff904 	addi	sp,sp,-28
 8000100:	dfc00615 	stw	ra,24(sp)
 8000104:	df000515 	stw	fp,20(sp)
 8000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 800010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000110:	0005313a 	rdctl	r2,ipending
 8000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000124:	00800044 	movi	r2,1
 8000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800012c:	e0fffb17 	ldw	r3,-20(fp)
 8000130:	e0bffc17 	ldw	r2,-16(fp)
 8000134:	1884703a 	and	r2,r3,r2
 8000138:	10001826 	beq	r2,zero,800019c <alt_irq_handler+0xa0>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 800013c:	00c00034 	movhi	r3,0
 8000140:	18d58604 	addi	r3,r3,22040
 8000144:	e0bffd17 	ldw	r2,-12(fp)
 8000148:	100490fa 	slli	r2,r2,3
 800014c:	1885883a 	add	r2,r3,r2
 8000150:	10800017 	ldw	r2,0(r2)
 8000154:	01000034 	movhi	r4,0
 8000158:	21158604 	addi	r4,r4,22040
 800015c:	e0fffd17 	ldw	r3,-12(fp)
 8000160:	180690fa 	slli	r3,r3,3
 8000164:	20c7883a 	add	r3,r4,r3
 8000168:	18c00104 	addi	r3,r3,4
 800016c:	18c00017 	ldw	r3,0(r3)
 8000170:	1809883a 	mov	r4,r3
 8000174:	e17ffd17 	ldw	r5,-12(fp)
 8000178:	103ee83a 	callr	r2
#endif
        break;
 800017c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000180:	0005313a 	rdctl	r2,ipending
 8000184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000188:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 800018c:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 8000190:	e0bffb17 	ldw	r2,-20(fp)
 8000194:	103fe21e 	bne	r2,zero,8000120 <__alt_mem_Onchip_SRAM_2+0xff000120>
 8000198:	00000706 	br	80001b8 <alt_irq_handler+0xbc>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 800019c:	e0bffc17 	ldw	r2,-16(fp)
 80001a0:	1085883a 	add	r2,r2,r2
 80001a4:	e0bffc15 	stw	r2,-16(fp)
      i++;
 80001a8:	e0bffd17 	ldw	r2,-12(fp)
 80001ac:	10800044 	addi	r2,r2,1
 80001b0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 80001b4:	003fdd06 	br	800012c <__alt_mem_Onchip_SRAM_2+0xff00012c>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001b8:	0001883a 	nop
}
 80001bc:	e037883a 	mov	sp,fp
 80001c0:	dfc00117 	ldw	ra,4(sp)
 80001c4:	df000017 	ldw	fp,0(sp)
 80001c8:	dec00204 	addi	sp,sp,8
 80001cc:	f800283a 	ret

080001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 80001d0:	defffb04 	addi	sp,sp,-20
 80001d4:	dfc00415 	stw	ra,16(sp)
 80001d8:	df000315 	stw	fp,12(sp)
 80001dc:	df000304 	addi	fp,sp,12
 80001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 80001e4:	00bfffc4 	movi	r2,-1
 80001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 80001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 80001f0:	d0a5f417 	ldw	r2,-26672(gp)
 80001f4:	10000726 	beq	r2,zero,8000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 80001f8:	d0a5f417 	ldw	r2,-26672(gp)
 80001fc:	e0fffd17 	ldw	r3,-12(fp)
 8000200:	1809883a 	mov	r4,r3
 8000204:	e17fff17 	ldw	r5,-4(fp)
 8000208:	e1bffe17 	ldw	r6,-8(fp)
 800020c:	103ee83a 	callr	r2
 8000210:	00000206 	br	800021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 8000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 8000218:	0005883a 	mov	r2,zero
}
 800021c:	e037883a 	mov	sp,fp
 8000220:	dfc00117 	ldw	ra,4(sp)
 8000224:	df000017 	ldw	fp,0(sp)
 8000228:	dec00204 	addi	sp,sp,8
 800022c:	f800283a 	ret

Disassembly of section .text:

00000210 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     210:	06c08034 	movhi	sp,512
    ori sp, sp, %lo(__alt_stack_pointer)
     214:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     218:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
     21c:	d6af9014 	ori	gp,gp,48704
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     220:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     224:	10957e14 	ori	r2,r2,22008

    movhi r3, %hi(__bss_end)
     228:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
     22c:	18d5c614 	ori	r3,r3,22296

    beq r2, r3, 1f
     230:	10c00326 	beq	r2,r3,240 <_start+0x30>

0:
    stw zero, (r2)
     234:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     238:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     23c:	10fffd36 	bltu	r2,r3,234 <__alt_mem_Onchip_SRAM_2+0xf7000234>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     240:	00004000 	call	400 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     244:	00004800 	call	480 <alt_main>

00000248 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     248:	003fff06 	br	248 <__alt_mem_Onchip_SRAM_2+0xf7000248>

0000024c <main>:
/* This program sweeps a green light back and forth on the LEDG lights */
enum DIR {LEFT, RIGHT};
void sweep(int *,enum DIR *);

int main(void)
{
     24c:	defff904 	addi	sp,sp,-28
     250:	dfc00615 	stw	ra,24(sp)
     254:	df000515 	stw	fp,20(sp)
     258:	df000504 	addi	fp,sp,20
	volatile int *LEDG_ptr = (int *) 0x10000010; // green LED address
     25c:	00840034 	movhi	r2,4096
     260:	10800404 	addi	r2,r2,16
     264:	e0bffb15 	stw	r2,-20(fp)
	volatile int *timer_ptr = (int *) 0x10002000; // interval timer address
     268:	00840034 	movhi	r2,4096
     26c:	10880004 	addi	r2,r2,8192
     270:	e0bffc15 	stw	r2,-16(fp)

	int LEDG_bits = 2; // pattern for the green lights
     274:	00800084 	movi	r2,2
     278:	e0bffe15 	stw	r2,-8(fp)
	enum DIR shift_dir = LEFT; // pattern shifting direction
     27c:	e03fff15 	stw	zero,-4(fp)

	/* set the interval timer period */
	int counter = 0x190000; // 1/(50 MHz) x 0x190000 = 33 msec
     280:	00800674 	movhi	r2,25
     284:	e0bffd15 	stw	r2,-12(fp)
	*(timer_ptr + 2) = (counter & 0xFFFF);
     288:	e0bffc17 	ldw	r2,-16(fp)
     28c:	10800204 	addi	r2,r2,8
     290:	e0fffd17 	ldw	r3,-12(fp)
     294:	18ffffcc 	andi	r3,r3,65535
     298:	10c00015 	stw	r3,0(r2)
	*(timer_ptr + 3) = (counter >> 16) & 0xFFFF;
     29c:	e0bffc17 	ldw	r2,-16(fp)
     2a0:	10800304 	addi	r2,r2,12
     2a4:	e0fffd17 	ldw	r3,-12(fp)
     2a8:	1806d43a 	srli	r3,r3,16
     2ac:	10c00015 	stw	r3,0(r2)
	*(timer_ptr + 1) = 0x6; // START = 1, CONT = 1, ITO = 0
     2b0:	e0bffc17 	ldw	r2,-16(fp)
     2b4:	10800104 	addi	r2,r2,4
     2b8:	00c00184 	movi	r3,6
     2bc:	10c00015 	stw	r3,0(r2)
	while (1)
	{
		*LEDG_ptr = LEDG_bits; // write to the green lights
     2c0:	e0fffe17 	ldw	r3,-8(fp)
     2c4:	e0bffb17 	ldw	r2,-20(fp)
     2c8:	10c00015 	stw	r3,0(r2)
		sweep (&LEDG_bits, &shift_dir); // shift the pattern left or right
     2cc:	e0fffe04 	addi	r3,fp,-8
     2d0:	e0bfff04 	addi	r2,fp,-4
     2d4:	1809883a 	mov	r4,r3
     2d8:	100b883a 	mov	r5,r2
     2dc:	00003000 	call	300 <sweep>
		
		while ( (*timer_ptr & 0x1) == 0 ) // wait for timeout
     2e0:	0001883a 	nop
     2e4:	e0bffc17 	ldw	r2,-16(fp)
     2e8:	10800017 	ldw	r2,0(r2)
     2ec:	1080004c 	andi	r2,r2,1
     2f0:	103ffc26 	beq	r2,zero,2e4 <__alt_mem_Onchip_SRAM_2+0xf70002e4>
		;
		*timer_ptr = 0; // reset the timeout bit
     2f4:	e0bffc17 	ldw	r2,-16(fp)
     2f8:	10000015 	stw	zero,0(r2)
	}
     2fc:	003ff006 	br	2c0 <__alt_mem_Onchip_SRAM_2+0xf70002c0>

00000300 <sweep>:
}

/* shift the pattern shown on the LEDs */
void sweep (int *pattern,enum DIR *dir)
{
     300:	defffd04 	addi	sp,sp,-12
     304:	df000215 	stw	fp,8(sp)
     308:	df000204 	addi	fp,sp,8
     30c:	e13ffe15 	stw	r4,-8(fp)
     310:	e17fff15 	stw	r5,-4(fp)
	if (*dir == LEFT)
     314:	e0bfff17 	ldw	r2,-4(fp)
     318:	10800017 	ldw	r2,0(r2)
     31c:	10000f1e 	bne	r2,zero,35c <sweep+0x5c>
		if (*pattern & 0x80)
     320:	e0bffe17 	ldw	r2,-8(fp)
     324:	10800017 	ldw	r2,0(r2)
     328:	1080200c 	andi	r2,r2,128
     32c:	10000426 	beq	r2,zero,340 <sweep+0x40>
			*dir = RIGHT;
     330:	e0bfff17 	ldw	r2,-4(fp)
     334:	00c00044 	movi	r3,1
     338:	10c00015 	stw	r3,0(r2)
     33c:	00001306 	br	38c <sweep+0x8c>
		else
			*pattern = *pattern << 1;
     340:	e0bffe17 	ldw	r2,-8(fp)
     344:	10800017 	ldw	r2,0(r2)
     348:	1085883a 	add	r2,r2,r2
     34c:	1007883a 	mov	r3,r2
     350:	e0bffe17 	ldw	r2,-8(fp)
     354:	10c00015 	stw	r3,0(r2)
     358:	00000c06 	br	38c <sweep+0x8c>
	else
		if (*pattern & 0x01)
     35c:	e0bffe17 	ldw	r2,-8(fp)
     360:	10800017 	ldw	r2,0(r2)
     364:	1080004c 	andi	r2,r2,1
     368:	10000326 	beq	r2,zero,378 <sweep+0x78>
			*dir = LEFT;
     36c:	e0bfff17 	ldw	r2,-4(fp)
     370:	10000015 	stw	zero,0(r2)
     374:	00000506 	br	38c <sweep+0x8c>
		else
			*pattern = *pattern >> 1;
     378:	e0bffe17 	ldw	r2,-8(fp)
     37c:	10800017 	ldw	r2,0(r2)
     380:	1007d07a 	srai	r3,r2,1
     384:	e0bffe17 	ldw	r2,-8(fp)
     388:	10c00015 	stw	r3,0(r2)
     38c:	e037883a 	mov	sp,fp
     390:	df000017 	ldw	fp,0(sp)
     394:	dec00104 	addi	sp,sp,4
     398:	f800283a 	ret

0000039c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
     39c:	defffc04 	addi	sp,sp,-16
     3a0:	df000315 	stw	fp,12(sp)
     3a4:	df000304 	addi	fp,sp,12
     3a8:	e13ffd15 	stw	r4,-12(fp)
     3ac:	e17ffe15 	stw	r5,-8(fp)
     3b0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
     3b4:	e0fffe17 	ldw	r3,-8(fp)
     3b8:	e0bffd17 	ldw	r2,-12(fp)
     3bc:	18800c26 	beq	r3,r2,3f0 <alt_load_section+0x54>
  {
    while( to != end )
     3c0:	00000806 	br	3e4 <alt_load_section+0x48>
    {
      *to++ = *from++;
     3c4:	e0bffe17 	ldw	r2,-8(fp)
     3c8:	10c00104 	addi	r3,r2,4
     3cc:	e0fffe15 	stw	r3,-8(fp)
     3d0:	e0fffd17 	ldw	r3,-12(fp)
     3d4:	19000104 	addi	r4,r3,4
     3d8:	e13ffd15 	stw	r4,-12(fp)
     3dc:	18c00017 	ldw	r3,0(r3)
     3e0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     3e4:	e0fffe17 	ldw	r3,-8(fp)
     3e8:	e0bfff17 	ldw	r2,-4(fp)
     3ec:	18bff51e 	bne	r3,r2,3c4 <__alt_mem_Onchip_SRAM_2+0xf70003c4>
    {
      *to++ = *from++;
    }
  }
}
     3f0:	e037883a 	mov	sp,fp
     3f4:	df000017 	ldw	fp,0(sp)
     3f8:	dec00104 	addi	sp,sp,4
     3fc:	f800283a 	ret

00000400 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
     400:	defffe04 	addi	sp,sp,-8
     404:	dfc00115 	stw	ra,4(sp)
     408:	df000015 	stw	fp,0(sp)
     40c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
     410:	01000034 	movhi	r4,0
     414:	210f9b04 	addi	r4,r4,15980
     418:	01400034 	movhi	r5,0
     41c:	2949b804 	addi	r5,r5,9952
     420:	01800034 	movhi	r6,0
     424:	318f9b04 	addi	r6,r6,15980
     428:	000039c0 	call	39c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
     42c:	01000034 	movhi	r4,0
     430:	21000004 	addi	r4,r4,0
     434:	01420034 	movhi	r5,2048
     438:	29400804 	addi	r5,r5,32
     43c:	01820034 	movhi	r6,2048
     440:	31808c04 	addi	r6,r6,560
     444:	000039c0 	call	39c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
     448:	01000034 	movhi	r4,0
     44c:	21098904 	addi	r4,r4,9764
     450:	01400034 	movhi	r5,0
     454:	29498904 	addi	r5,r5,9764
     458:	01800034 	movhi	r6,0
     45c:	3189b804 	addi	r6,r6,9952
     460:	000039c0 	call	39c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
     464:	00013a00 	call	13a0 <alt_dcache_flush_all>
  alt_icache_flush_all();
     468:	00015900 	call	1590 <alt_icache_flush_all>
}
     46c:	e037883a 	mov	sp,fp
     470:	dfc00117 	ldw	ra,4(sp)
     474:	df000017 	ldw	fp,0(sp)
     478:	dec00204 	addi	sp,sp,8
     47c:	f800283a 	ret

00000480 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
     480:	defffd04 	addi	sp,sp,-12
     484:	dfc00215 	stw	ra,8(sp)
     488:	df000115 	stw	fp,4(sp)
     48c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
     490:	0009883a 	mov	r4,zero
     494:	00005300 	call	530 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
     498:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
     49c:	00005640 	call	564 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
     4a0:	01000034 	movhi	r4,0
     4a4:	21098904 	addi	r4,r4,9764
     4a8:	01400034 	movhi	r5,0
     4ac:	29498904 	addi	r5,r5,9764
     4b0:	01800034 	movhi	r6,0
     4b4:	31898904 	addi	r6,r6,9764
     4b8:	000168c0 	call	168c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
     4bc:	00014d80 	call	14d8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
     4c0:	01000034 	movhi	r4,0
     4c4:	21054d04 	addi	r4,r4,5428
     4c8:	00020a80 	call	20a8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
     4cc:	d125ee17 	ldw	r4,-26696(gp)
     4d0:	d0e5ef17 	ldw	r3,-26692(gp)
     4d4:	d0a5f017 	ldw	r2,-26688(gp)
     4d8:	180b883a 	mov	r5,r3
     4dc:	100d883a 	mov	r6,r2
     4e0:	000024c0 	call	24c <main>
     4e4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
     4e8:	01000044 	movi	r4,1
     4ec:	00012d00 	call	12d0 <close>
  exit (result);
     4f0:	e13fff17 	ldw	r4,-4(fp)
     4f4:	00020bc0 	call	20bc <exit>

000004f8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
     4f8:	defffd04 	addi	sp,sp,-12
     4fc:	dfc00215 	stw	ra,8(sp)
     500:	df000115 	stw	fp,4(sp)
     504:	df000104 	addi	fp,sp,4
     508:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
     50c:	e13fff17 	ldw	r4,-4(fp)
     510:	01400034 	movhi	r5,0
     514:	294f9204 	addi	r5,r5,15944
     518:	00014380 	call	1438 <alt_dev_llist_insert>
}
     51c:	e037883a 	mov	sp,fp
     520:	dfc00117 	ldw	ra,4(sp)
     524:	df000017 	ldw	fp,0(sp)
     528:	dec00204 	addi	sp,sp,8
     52c:	f800283a 	ret

00000530 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
     530:	defffd04 	addi	sp,sp,-12
     534:	dfc00215 	stw	ra,8(sp)
     538:	df000115 	stw	fp,4(sp)
     53c:	df000104 	addi	fp,sp,4
     540:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, Nios2);
     544:	0001d700 	call	1d70 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
     548:	00800044 	movi	r2,1
     54c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
     550:	e037883a 	mov	sp,fp
     554:	dfc00117 	ldw	ra,4(sp)
     558:	df000017 	ldw	fp,0(sp)
     55c:	dec00204 	addi	sp,sp,8
     560:	f800283a 	ret

00000564 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
     564:	defffe04 	addi	sp,sp,-8
     568:	dfc00115 	stw	ra,4(sp)
     56c:	df000015 	stw	fp,0(sp)
     570:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
     574:	01040034 	movhi	r4,4096
     578:	21080004 	addi	r4,r4,8192
     57c:	000b883a 	mov	r5,zero
     580:	000d883a 	mov	r6,zero
     584:	01c00204 	movi	r7,8
     588:	00010c00 	call	10c0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
     58c:	01000034 	movhi	r4,0
     590:	2109c204 	addi	r4,r4,9992
     594:	000b883a 	mov	r5,zero
     598:	01800204 	movi	r6,8
     59c:	000077c0 	call	77c <altera_avalon_jtag_uart_init>
     5a0:	01000034 	movhi	r4,0
     5a4:	2109b804 	addi	r4,r4,9952
     5a8:	00004f80 	call	4f8 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, SysID);
     5ac:	0001883a 	nop
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( DIP_SWITCHES, Dip_Switches);
     5b0:	01000034 	movhi	r4,0
     5b4:	210dd004 	addi	r4,r4,14144
     5b8:	00004f80 	call	4f8 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( EXPANSION_JP1, Expansion_JP1);
     5bc:	01000034 	movhi	r4,0
     5c0:	210ddb04 	addi	r4,r4,14188
     5c4:	00004f80 	call	4f8 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( EXPANSION_JP2, Expansion_JP2);
     5c8:	01000034 	movhi	r4,0
     5cc:	210de604 	addi	r4,r4,14232
     5d0:	00004f80 	call	4f8 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( EXPANSION_JP3, Expansion_JP3);
     5d4:	01000034 	movhi	r4,0
     5d8:	210df104 	addi	r4,r4,14276
     5dc:	00004f80 	call	4f8 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( EXPANSION_JP3_IN, Expansion_JP3_In);
     5e0:	01000034 	movhi	r4,0
     5e4:	210dfc04 	addi	r4,r4,14320
     5e8:	00004f80 	call	4f8 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( GREEN_LEDS, Green_LEDs);
     5ec:	01000034 	movhi	r4,0
     5f0:	210e0704 	addi	r4,r4,14364
     5f4:	00004f80 	call	4f8 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PUSHBUTTONS, Pushbuttons);
     5f8:	01000034 	movhi	r4,0
     5fc:	210e1204 	addi	r4,r4,14408
     600:	00004f80 	call	4f8 <alt_dev_reg>
}
     604:	e037883a 	mov	sp,fp
     608:	dfc00117 	ldw	ra,4(sp)
     60c:	df000017 	ldw	fp,0(sp)
     610:	dec00204 	addi	sp,sp,8
     614:	f800283a 	ret

00000618 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
     618:	defffa04 	addi	sp,sp,-24
     61c:	dfc00515 	stw	ra,20(sp)
     620:	df000415 	stw	fp,16(sp)
     624:	df000404 	addi	fp,sp,16
     628:	e13ffd15 	stw	r4,-12(fp)
     62c:	e17ffe15 	stw	r5,-8(fp)
     630:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
     634:	e0bffd17 	ldw	r2,-12(fp)
     638:	10800017 	ldw	r2,0(r2)
     63c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
     640:	e0bffc17 	ldw	r2,-16(fp)
     644:	10c00a04 	addi	r3,r2,40
     648:	e0bffd17 	ldw	r2,-12(fp)
     64c:	10800217 	ldw	r2,8(r2)
     650:	1809883a 	mov	r4,r3
     654:	e17ffe17 	ldw	r5,-8(fp)
     658:	e1bfff17 	ldw	r6,-4(fp)
     65c:	100f883a 	mov	r7,r2
     660:	0000c280 	call	c28 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
     664:	e037883a 	mov	sp,fp
     668:	dfc00117 	ldw	ra,4(sp)
     66c:	df000017 	ldw	fp,0(sp)
     670:	dec00204 	addi	sp,sp,8
     674:	f800283a 	ret

00000678 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
     678:	defffa04 	addi	sp,sp,-24
     67c:	dfc00515 	stw	ra,20(sp)
     680:	df000415 	stw	fp,16(sp)
     684:	df000404 	addi	fp,sp,16
     688:	e13ffd15 	stw	r4,-12(fp)
     68c:	e17ffe15 	stw	r5,-8(fp)
     690:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
     694:	e0bffd17 	ldw	r2,-12(fp)
     698:	10800017 	ldw	r2,0(r2)
     69c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
     6a0:	e0bffc17 	ldw	r2,-16(fp)
     6a4:	10c00a04 	addi	r3,r2,40
     6a8:	e0bffd17 	ldw	r2,-12(fp)
     6ac:	10800217 	ldw	r2,8(r2)
     6b0:	1809883a 	mov	r4,r3
     6b4:	e17ffe17 	ldw	r5,-8(fp)
     6b8:	e1bfff17 	ldw	r6,-4(fp)
     6bc:	100f883a 	mov	r7,r2
     6c0:	0000e300 	call	e30 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
     6c4:	e037883a 	mov	sp,fp
     6c8:	dfc00117 	ldw	ra,4(sp)
     6cc:	df000017 	ldw	fp,0(sp)
     6d0:	dec00204 	addi	sp,sp,8
     6d4:	f800283a 	ret

000006d8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
     6d8:	defffc04 	addi	sp,sp,-16
     6dc:	dfc00315 	stw	ra,12(sp)
     6e0:	df000215 	stw	fp,8(sp)
     6e4:	df000204 	addi	fp,sp,8
     6e8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
     6ec:	e0bfff17 	ldw	r2,-4(fp)
     6f0:	10800017 	ldw	r2,0(r2)
     6f4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
     6f8:	e0bffe17 	ldw	r2,-8(fp)
     6fc:	10c00a04 	addi	r3,r2,40
     700:	e0bfff17 	ldw	r2,-4(fp)
     704:	10800217 	ldw	r2,8(r2)
     708:	1809883a 	mov	r4,r3
     70c:	100b883a 	mov	r5,r2
     710:	0000ad40 	call	ad4 <altera_avalon_jtag_uart_close>
}
     714:	e037883a 	mov	sp,fp
     718:	dfc00117 	ldw	ra,4(sp)
     71c:	df000017 	ldw	fp,0(sp)
     720:	dec00204 	addi	sp,sp,8
     724:	f800283a 	ret

00000728 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
     728:	defffa04 	addi	sp,sp,-24
     72c:	dfc00515 	stw	ra,20(sp)
     730:	df000415 	stw	fp,16(sp)
     734:	df000404 	addi	fp,sp,16
     738:	e13ffd15 	stw	r4,-12(fp)
     73c:	e17ffe15 	stw	r5,-8(fp)
     740:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
     744:	e0bffd17 	ldw	r2,-12(fp)
     748:	10800017 	ldw	r2,0(r2)
     74c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
     750:	e0bffc17 	ldw	r2,-16(fp)
     754:	10800a04 	addi	r2,r2,40
     758:	1009883a 	mov	r4,r2
     75c:	e17ffe17 	ldw	r5,-8(fp)
     760:	e1bfff17 	ldw	r6,-4(fp)
     764:	0000b3c0 	call	b3c <altera_avalon_jtag_uart_ioctl>
}
     768:	e037883a 	mov	sp,fp
     76c:	dfc00117 	ldw	ra,4(sp)
     770:	df000017 	ldw	fp,0(sp)
     774:	dec00204 	addi	sp,sp,8
     778:	f800283a 	ret

0000077c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
     77c:	defffb04 	addi	sp,sp,-20
     780:	dfc00415 	stw	ra,16(sp)
     784:	df000315 	stw	fp,12(sp)
     788:	df000304 	addi	fp,sp,12
     78c:	e13ffd15 	stw	r4,-12(fp)
     790:	e17ffe15 	stw	r5,-8(fp)
     794:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
     798:	e0bffd17 	ldw	r2,-12(fp)
     79c:	00c00044 	movi	r3,1
     7a0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
     7a4:	e0bffd17 	ldw	r2,-12(fp)
     7a8:	10800017 	ldw	r2,0(r2)
     7ac:	10800104 	addi	r2,r2,4
     7b0:	e0fffd17 	ldw	r3,-12(fp)
     7b4:	18c00817 	ldw	r3,32(r3)
     7b8:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
     7bc:	e0bfff17 	ldw	r2,-4(fp)
     7c0:	1009883a 	mov	r4,r2
     7c4:	e17ffd17 	ldw	r5,-12(fp)
     7c8:	01800034 	movhi	r6,0
     7cc:	31820c04 	addi	r6,r6,2096
     7d0:	00017040 	call	1704 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
     7d4:	e0bffd17 	ldw	r2,-12(fp)
     7d8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
     7dc:	e0bffd17 	ldw	r2,-12(fp)
     7e0:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
     7e4:	00800034 	movhi	r2,0
     7e8:	10958204 	addi	r2,r2,22024
     7ec:	10800017 	ldw	r2,0(r2)
     7f0:	1809883a 	mov	r4,r3
     7f4:	100b883a 	mov	r5,r2
     7f8:	01800034 	movhi	r6,0
     7fc:	31828c04 	addi	r6,r6,2608
     800:	e1fffd17 	ldw	r7,-12(fp)
     804:	00011400 	call	1140 <alt_alarm_start>
     808:	1000040e 	bge	r2,zero,81c <altera_avalon_jtag_uart_init+0xa0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
     80c:	e0bffd17 	ldw	r2,-12(fp)
     810:	00e00034 	movhi	r3,32768
     814:	18ffffc4 	addi	r3,r3,-1
     818:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
     81c:	e037883a 	mov	sp,fp
     820:	dfc00117 	ldw	ra,4(sp)
     824:	df000017 	ldw	fp,0(sp)
     828:	dec00204 	addi	sp,sp,8
     82c:	f800283a 	ret

00000830 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
     830:	defff704 	addi	sp,sp,-36
     834:	df000815 	stw	fp,32(sp)
     838:	df000804 	addi	fp,sp,32
     83c:	e13ffe15 	stw	r4,-8(fp)
     840:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
     844:	e0bffe17 	ldw	r2,-8(fp)
     848:	e0bffa15 	stw	r2,-24(fp)
  unsigned int base = sp->base;
     84c:	e0bffa17 	ldw	r2,-24(fp)
     850:	10800017 	ldw	r2,0(r2)
     854:	e0bffb15 	stw	r2,-20(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     858:	e0bffb17 	ldw	r2,-20(fp)
     85c:	10800104 	addi	r2,r2,4
     860:	10800037 	ldwio	r2,0(r2)
     864:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
     868:	e0bffc17 	ldw	r2,-16(fp)
     86c:	1080c00c 	andi	r2,r2,768
     870:	1000011e 	bne	r2,zero,878 <altera_avalon_jtag_uart_irq+0x48>
      break;
     874:	00006a06 	br	a20 <altera_avalon_jtag_uart_irq+0x1f0>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
     878:	e0bffc17 	ldw	r2,-16(fp)
     87c:	1080400c 	andi	r2,r2,256
     880:	10003226 	beq	r2,zero,94c <altera_avalon_jtag_uart_irq+0x11c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
     884:	00800074 	movhi	r2,1
     888:	e0bff815 	stw	r2,-32(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     88c:	e0bffa17 	ldw	r2,-24(fp)
     890:	10800a17 	ldw	r2,40(r2)
     894:	10800044 	addi	r2,r2,1
     898:	1081ffcc 	andi	r2,r2,2047
     89c:	e0bffd15 	stw	r2,-12(fp)
        if (next == sp->rx_out)
     8a0:	e0bffa17 	ldw	r2,-24(fp)
     8a4:	10c00b17 	ldw	r3,44(r2)
     8a8:	e0bffd17 	ldw	r2,-12(fp)
     8ac:	1880011e 	bne	r3,r2,8b4 <altera_avalon_jtag_uart_irq+0x84>
          break;
     8b0:	00001506 	br	908 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
     8b4:	e0bffb17 	ldw	r2,-20(fp)
     8b8:	10800037 	ldwio	r2,0(r2)
     8bc:	e0bff815 	stw	r2,-32(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
     8c0:	e0bff817 	ldw	r2,-32(fp)
     8c4:	10a0000c 	andi	r2,r2,32768
     8c8:	1000011e 	bne	r2,zero,8d0 <altera_avalon_jtag_uart_irq+0xa0>
          break;
     8cc:	00000e06 	br	908 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
     8d0:	e0bffa17 	ldw	r2,-24(fp)
     8d4:	10800a17 	ldw	r2,40(r2)
     8d8:	e0fff817 	ldw	r3,-32(fp)
     8dc:	e13ffa17 	ldw	r4,-24(fp)
     8e0:	2085883a 	add	r2,r4,r2
     8e4:	10800e04 	addi	r2,r2,56
     8e8:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     8ec:	e0bffa17 	ldw	r2,-24(fp)
     8f0:	10800a17 	ldw	r2,40(r2)
     8f4:	10800044 	addi	r2,r2,1
     8f8:	10c1ffcc 	andi	r3,r2,2047
     8fc:	e0bffa17 	ldw	r2,-24(fp)
     900:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
     904:	003fe106 	br	88c <__alt_mem_Onchip_SRAM_2+0xf700088c>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
     908:	e0bff817 	ldw	r2,-32(fp)
     90c:	10bfffec 	andhi	r2,r2,65535
     910:	10000e26 	beq	r2,zero,94c <altera_avalon_jtag_uart_irq+0x11c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
     914:	e0bffa17 	ldw	r2,-24(fp)
     918:	10c00817 	ldw	r3,32(r2)
     91c:	00bfff84 	movi	r2,-2
     920:	1886703a 	and	r3,r3,r2
     924:	e0bffa17 	ldw	r2,-24(fp)
     928:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
     92c:	e0bffb17 	ldw	r2,-20(fp)
     930:	10800104 	addi	r2,r2,4
     934:	e0fffa17 	ldw	r3,-24(fp)
     938:	18c00817 	ldw	r3,32(r3)
     93c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     940:	e0bffb17 	ldw	r2,-20(fp)
     944:	10800104 	addi	r2,r2,4
     948:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
     94c:	e0bffc17 	ldw	r2,-16(fp)
     950:	1080800c 	andi	r2,r2,512
     954:	10003126 	beq	r2,zero,a1c <altera_avalon_jtag_uart_irq+0x1ec>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
     958:	e0bffc17 	ldw	r2,-16(fp)
     95c:	1004d43a 	srli	r2,r2,16
     960:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
     964:	00001406 	br	9b8 <altera_avalon_jtag_uart_irq+0x188>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
     968:	e0bffb17 	ldw	r2,-20(fp)
     96c:	e0fffa17 	ldw	r3,-24(fp)
     970:	18c00d17 	ldw	r3,52(r3)
     974:	e13ffa17 	ldw	r4,-24(fp)
     978:	20c7883a 	add	r3,r4,r3
     97c:	18c20e04 	addi	r3,r3,2104
     980:	18c00003 	ldbu	r3,0(r3)
     984:	18c03fcc 	andi	r3,r3,255
     988:	18c0201c 	xori	r3,r3,128
     98c:	18ffe004 	addi	r3,r3,-128
     990:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     994:	e0bffa17 	ldw	r2,-24(fp)
     998:	10800d17 	ldw	r2,52(r2)
     99c:	10800044 	addi	r2,r2,1
     9a0:	10c1ffcc 	andi	r3,r2,2047
     9a4:	e0bffa17 	ldw	r2,-24(fp)
     9a8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
     9ac:	e0bff917 	ldw	r2,-28(fp)
     9b0:	10bfffc4 	addi	r2,r2,-1
     9b4:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
     9b8:	e0bff917 	ldw	r2,-28(fp)
     9bc:	10000526 	beq	r2,zero,9d4 <altera_avalon_jtag_uart_irq+0x1a4>
     9c0:	e0bffa17 	ldw	r2,-24(fp)
     9c4:	10c00d17 	ldw	r3,52(r2)
     9c8:	e0bffa17 	ldw	r2,-24(fp)
     9cc:	10800c17 	ldw	r2,48(r2)
     9d0:	18bfe51e 	bne	r3,r2,968 <__alt_mem_Onchip_SRAM_2+0xf7000968>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
     9d4:	e0bff917 	ldw	r2,-28(fp)
     9d8:	10001026 	beq	r2,zero,a1c <altera_avalon_jtag_uart_irq+0x1ec>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
     9dc:	e0bffa17 	ldw	r2,-24(fp)
     9e0:	10c00817 	ldw	r3,32(r2)
     9e4:	00bfff44 	movi	r2,-3
     9e8:	1886703a 	and	r3,r3,r2
     9ec:	e0bffa17 	ldw	r2,-24(fp)
     9f0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
     9f4:	e0bffa17 	ldw	r2,-24(fp)
     9f8:	10800017 	ldw	r2,0(r2)
     9fc:	10800104 	addi	r2,r2,4
     a00:	e0fffa17 	ldw	r3,-24(fp)
     a04:	18c00817 	ldw	r3,32(r3)
     a08:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     a0c:	e0bffb17 	ldw	r2,-20(fp)
     a10:	10800104 	addi	r2,r2,4
     a14:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
     a18:	003f8f06 	br	858 <__alt_mem_Onchip_SRAM_2+0xf7000858>
     a1c:	003f8e06 	br	858 <__alt_mem_Onchip_SRAM_2+0xf7000858>
}
     a20:	e037883a 	mov	sp,fp
     a24:	df000017 	ldw	fp,0(sp)
     a28:	dec00104 	addi	sp,sp,4
     a2c:	f800283a 	ret

00000a30 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
     a30:	defff804 	addi	sp,sp,-32
     a34:	df000715 	stw	fp,28(sp)
     a38:	df000704 	addi	fp,sp,28
     a3c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
     a40:	e0bffb17 	ldw	r2,-20(fp)
     a44:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
     a48:	e0bff917 	ldw	r2,-28(fp)
     a4c:	10800017 	ldw	r2,0(r2)
     a50:	10800104 	addi	r2,r2,4
     a54:	10800037 	ldwio	r2,0(r2)
     a58:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
     a5c:	e0bffa17 	ldw	r2,-24(fp)
     a60:	1081000c 	andi	r2,r2,1024
     a64:	10000a26 	beq	r2,zero,a90 <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
     a68:	e0bff917 	ldw	r2,-28(fp)
     a6c:	10800017 	ldw	r2,0(r2)
     a70:	10800104 	addi	r2,r2,4
     a74:	e0fff917 	ldw	r3,-28(fp)
     a78:	18c00817 	ldw	r3,32(r3)
     a7c:	18c10014 	ori	r3,r3,1024
     a80:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
     a84:	e0bff917 	ldw	r2,-28(fp)
     a88:	10000915 	stw	zero,36(r2)
     a8c:	00000a06 	br	ab8 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
     a90:	e0bff917 	ldw	r2,-28(fp)
     a94:	10800917 	ldw	r2,36(r2)
     a98:	00e00034 	movhi	r3,32768
     a9c:	18ffff04 	addi	r3,r3,-4
     aa0:	18800536 	bltu	r3,r2,ab8 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
     aa4:	e0bff917 	ldw	r2,-28(fp)
     aa8:	10800917 	ldw	r2,36(r2)
     aac:	10c00044 	addi	r3,r2,1
     ab0:	e0bff917 	ldw	r2,-28(fp)
     ab4:	10c00915 	stw	r3,36(r2)
     ab8:	00800034 	movhi	r2,0
     abc:	10958204 	addi	r2,r2,22024
     ac0:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
     ac4:	e037883a 	mov	sp,fp
     ac8:	df000017 	ldw	fp,0(sp)
     acc:	dec00104 	addi	sp,sp,4
     ad0:	f800283a 	ret

00000ad4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
     ad4:	defffd04 	addi	sp,sp,-12
     ad8:	df000215 	stw	fp,8(sp)
     adc:	df000204 	addi	fp,sp,8
     ae0:	e13ffe15 	stw	r4,-8(fp)
     ae4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
     ae8:	00000506 	br	b00 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
     aec:	e0bfff17 	ldw	r2,-4(fp)
     af0:	1090000c 	andi	r2,r2,16384
     af4:	10000226 	beq	r2,zero,b00 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
     af8:	00bffd44 	movi	r2,-11
     afc:	00000b06 	br	b2c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
     b00:	e0bffe17 	ldw	r2,-8(fp)
     b04:	10c00d17 	ldw	r3,52(r2)
     b08:	e0bffe17 	ldw	r2,-8(fp)
     b0c:	10800c17 	ldw	r2,48(r2)
     b10:	18800526 	beq	r3,r2,b28 <altera_avalon_jtag_uart_close+0x54>
     b14:	e0bffe17 	ldw	r2,-8(fp)
     b18:	10c00917 	ldw	r3,36(r2)
     b1c:	e0bffe17 	ldw	r2,-8(fp)
     b20:	10800117 	ldw	r2,4(r2)
     b24:	18bff136 	bltu	r3,r2,aec <__alt_mem_Onchip_SRAM_2+0xf7000aec>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
     b28:	0005883a 	mov	r2,zero
}
     b2c:	e037883a 	mov	sp,fp
     b30:	df000017 	ldw	fp,0(sp)
     b34:	dec00104 	addi	sp,sp,4
     b38:	f800283a 	ret

00000b3c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
     b3c:	defffa04 	addi	sp,sp,-24
     b40:	df000515 	stw	fp,20(sp)
     b44:	df000504 	addi	fp,sp,20
     b48:	e13ffd15 	stw	r4,-12(fp)
     b4c:	e17ffe15 	stw	r5,-8(fp)
     b50:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
     b54:	00bff9c4 	movi	r2,-25
     b58:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
     b5c:	e0bffe17 	ldw	r2,-8(fp)
     b60:	10da8060 	cmpeqi	r3,r2,27137
     b64:	1800031e 	bne	r3,zero,b74 <altera_avalon_jtag_uart_ioctl+0x38>
     b68:	109a80a0 	cmpeqi	r2,r2,27138
     b6c:	1000191e 	bne	r2,zero,bd4 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
     b70:	00002806 	br	c14 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
     b74:	e0bffd17 	ldw	r2,-12(fp)
     b78:	10c00117 	ldw	r3,4(r2)
     b7c:	00a00034 	movhi	r2,32768
     b80:	10bfffc4 	addi	r2,r2,-1
     b84:	18801226 	beq	r3,r2,bd0 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
     b88:	e0bfff17 	ldw	r2,-4(fp)
     b8c:	10800017 	ldw	r2,0(r2)
     b90:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
     b94:	e0bffc17 	ldw	r2,-16(fp)
     b98:	10800090 	cmplti	r2,r2,2
     b9c:	1000061e 	bne	r2,zero,bb8 <altera_avalon_jtag_uart_ioctl+0x7c>
     ba0:	e0fffc17 	ldw	r3,-16(fp)
     ba4:	00a00034 	movhi	r2,32768
     ba8:	10bfffc4 	addi	r2,r2,-1
     bac:	18800226 	beq	r3,r2,bb8 <altera_avalon_jtag_uart_ioctl+0x7c>
     bb0:	e0bffc17 	ldw	r2,-16(fp)
     bb4:	00000206 	br	bc0 <altera_avalon_jtag_uart_ioctl+0x84>
     bb8:	00a00034 	movhi	r2,32768
     bbc:	10bfff84 	addi	r2,r2,-2
     bc0:	e0fffd17 	ldw	r3,-12(fp)
     bc4:	18800115 	stw	r2,4(r3)
      rc = 0;
     bc8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
     bcc:	00001106 	br	c14 <altera_avalon_jtag_uart_ioctl+0xd8>
     bd0:	00001006 	br	c14 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
     bd4:	e0bffd17 	ldw	r2,-12(fp)
     bd8:	10c00117 	ldw	r3,4(r2)
     bdc:	00a00034 	movhi	r2,32768
     be0:	10bfffc4 	addi	r2,r2,-1
     be4:	18800a26 	beq	r3,r2,c10 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
     be8:	e0bffd17 	ldw	r2,-12(fp)
     bec:	10c00917 	ldw	r3,36(r2)
     bf0:	e0bffd17 	ldw	r2,-12(fp)
     bf4:	10800117 	ldw	r2,4(r2)
     bf8:	1885803a 	cmpltu	r2,r3,r2
     bfc:	10c03fcc 	andi	r3,r2,255
     c00:	e0bfff17 	ldw	r2,-4(fp)
     c04:	10c00015 	stw	r3,0(r2)
      rc = 0;
     c08:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
     c0c:	00000006 	br	c10 <altera_avalon_jtag_uart_ioctl+0xd4>
     c10:	0001883a 	nop

  default:
    break;
  }

  return rc;
     c14:	e0bffb17 	ldw	r2,-20(fp)
}
     c18:	e037883a 	mov	sp,fp
     c1c:	df000017 	ldw	fp,0(sp)
     c20:	dec00104 	addi	sp,sp,4
     c24:	f800283a 	ret

00000c28 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
     c28:	defff304 	addi	sp,sp,-52
     c2c:	dfc00c15 	stw	ra,48(sp)
     c30:	df000b15 	stw	fp,44(sp)
     c34:	df000b04 	addi	fp,sp,44
     c38:	e13ffc15 	stw	r4,-16(fp)
     c3c:	e17ffd15 	stw	r5,-12(fp)
     c40:	e1bffe15 	stw	r6,-8(fp)
     c44:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
     c48:	e0bffd17 	ldw	r2,-12(fp)
     c4c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
     c50:	00004906 	br	d78 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
     c54:	e0bffc17 	ldw	r2,-16(fp)
     c58:	10800a17 	ldw	r2,40(r2)
     c5c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
     c60:	e0bffc17 	ldw	r2,-16(fp)
     c64:	10800b17 	ldw	r2,44(r2)
     c68:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
     c6c:	e0fff717 	ldw	r3,-36(fp)
     c70:	e0bff817 	ldw	r2,-32(fp)
     c74:	18800536 	bltu	r3,r2,c8c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
     c78:	e0fff717 	ldw	r3,-36(fp)
     c7c:	e0bff817 	ldw	r2,-32(fp)
     c80:	1885c83a 	sub	r2,r3,r2
     c84:	e0bff615 	stw	r2,-40(fp)
     c88:	00000406 	br	c9c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
     c8c:	00c20004 	movi	r3,2048
     c90:	e0bff817 	ldw	r2,-32(fp)
     c94:	1885c83a 	sub	r2,r3,r2
     c98:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
     c9c:	e0bff617 	ldw	r2,-40(fp)
     ca0:	1000011e 	bne	r2,zero,ca8 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
     ca4:	00001d06 	br	d1c <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
     ca8:	e0fffe17 	ldw	r3,-8(fp)
     cac:	e0bff617 	ldw	r2,-40(fp)
     cb0:	1880022e 	bgeu	r3,r2,cbc <altera_avalon_jtag_uart_read+0x94>
        n = space;
     cb4:	e0bffe17 	ldw	r2,-8(fp)
     cb8:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
     cbc:	e0bff817 	ldw	r2,-32(fp)
     cc0:	10800e04 	addi	r2,r2,56
     cc4:	e0fffc17 	ldw	r3,-16(fp)
     cc8:	1885883a 	add	r2,r3,r2
     ccc:	e13ff517 	ldw	r4,-44(fp)
     cd0:	100b883a 	mov	r5,r2
     cd4:	e1bff617 	ldw	r6,-40(fp)
     cd8:	00021700 	call	2170 <memcpy>
      ptr   += n;
     cdc:	e0fff517 	ldw	r3,-44(fp)
     ce0:	e0bff617 	ldw	r2,-40(fp)
     ce4:	1885883a 	add	r2,r3,r2
     ce8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
     cec:	e0fffe17 	ldw	r3,-8(fp)
     cf0:	e0bff617 	ldw	r2,-40(fp)
     cf4:	1885c83a 	sub	r2,r3,r2
     cf8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     cfc:	e0fff817 	ldw	r3,-32(fp)
     d00:	e0bff617 	ldw	r2,-40(fp)
     d04:	1885883a 	add	r2,r3,r2
     d08:	10c1ffcc 	andi	r3,r2,2047
     d0c:	e0bffc17 	ldw	r2,-16(fp)
     d10:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
     d14:	e0bffe17 	ldw	r2,-8(fp)
     d18:	00bfce16 	blt	zero,r2,c54 <__alt_mem_Onchip_SRAM_2+0xf7000c54>

    /* If we read any data then return it */
    if (ptr != buffer)
     d1c:	e0fff517 	ldw	r3,-44(fp)
     d20:	e0bffd17 	ldw	r2,-12(fp)
     d24:	18800126 	beq	r3,r2,d2c <altera_avalon_jtag_uart_read+0x104>
      break;
     d28:	00001506 	br	d80 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
     d2c:	e0bfff17 	ldw	r2,-4(fp)
     d30:	1090000c 	andi	r2,r2,16384
     d34:	10000126 	beq	r2,zero,d3c <altera_avalon_jtag_uart_read+0x114>
      break;
     d38:	00001106 	br	d80 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
     d3c:	0001883a 	nop
     d40:	e0bffc17 	ldw	r2,-16(fp)
     d44:	10c00a17 	ldw	r3,40(r2)
     d48:	e0bff717 	ldw	r2,-36(fp)
     d4c:	1880051e 	bne	r3,r2,d64 <altera_avalon_jtag_uart_read+0x13c>
     d50:	e0bffc17 	ldw	r2,-16(fp)
     d54:	10c00917 	ldw	r3,36(r2)
     d58:	e0bffc17 	ldw	r2,-16(fp)
     d5c:	10800117 	ldw	r2,4(r2)
     d60:	18bff736 	bltu	r3,r2,d40 <__alt_mem_Onchip_SRAM_2+0xf7000d40>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
     d64:	e0bffc17 	ldw	r2,-16(fp)
     d68:	10c00a17 	ldw	r3,40(r2)
     d6c:	e0bff717 	ldw	r2,-36(fp)
     d70:	1880011e 	bne	r3,r2,d78 <altera_avalon_jtag_uart_read+0x150>
      break;
     d74:	00000206 	br	d80 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
     d78:	e0bffe17 	ldw	r2,-8(fp)
     d7c:	00bfb516 	blt	zero,r2,c54 <__alt_mem_Onchip_SRAM_2+0xf7000c54>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
     d80:	e0fff517 	ldw	r3,-44(fp)
     d84:	e0bffd17 	ldw	r2,-12(fp)
     d88:	18801726 	beq	r3,r2,de8 <altera_avalon_jtag_uart_read+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     d8c:	0005303a 	rdctl	r2,status
     d90:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     d94:	e0fffa17 	ldw	r3,-24(fp)
     d98:	00bfff84 	movi	r2,-2
     d9c:	1884703a 	and	r2,r3,r2
     da0:	1001703a 	wrctl	status,r2
  
  return context;
     da4:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
     da8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
     dac:	e0bffc17 	ldw	r2,-16(fp)
     db0:	10800817 	ldw	r2,32(r2)
     db4:	10c00054 	ori	r3,r2,1
     db8:	e0bffc17 	ldw	r2,-16(fp)
     dbc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
     dc0:	e0bffc17 	ldw	r2,-16(fp)
     dc4:	10800017 	ldw	r2,0(r2)
     dc8:	10800104 	addi	r2,r2,4
     dcc:	e0fffc17 	ldw	r3,-16(fp)
     dd0:	18c00817 	ldw	r3,32(r3)
     dd4:	10c00035 	stwio	r3,0(r2)
     dd8:	e0bff917 	ldw	r2,-28(fp)
     ddc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     de0:	e0bffb17 	ldw	r2,-20(fp)
     de4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
     de8:	e0fff517 	ldw	r3,-44(fp)
     dec:	e0bffd17 	ldw	r2,-12(fp)
     df0:	18800426 	beq	r3,r2,e04 <altera_avalon_jtag_uart_read+0x1dc>
    return ptr - buffer;
     df4:	e0fff517 	ldw	r3,-44(fp)
     df8:	e0bffd17 	ldw	r2,-12(fp)
     dfc:	1885c83a 	sub	r2,r3,r2
     e00:	00000606 	br	e1c <altera_avalon_jtag_uart_read+0x1f4>
  else if (flags & O_NONBLOCK)
     e04:	e0bfff17 	ldw	r2,-4(fp)
     e08:	1090000c 	andi	r2,r2,16384
     e0c:	10000226 	beq	r2,zero,e18 <altera_avalon_jtag_uart_read+0x1f0>
    return -EWOULDBLOCK;
     e10:	00bffd44 	movi	r2,-11
     e14:	00000106 	br	e1c <altera_avalon_jtag_uart_read+0x1f4>
  else
    return -EIO;
     e18:	00bffec4 	movi	r2,-5
}
     e1c:	e037883a 	mov	sp,fp
     e20:	dfc00117 	ldw	ra,4(sp)
     e24:	df000017 	ldw	fp,0(sp)
     e28:	dec00204 	addi	sp,sp,8
     e2c:	f800283a 	ret

00000e30 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
     e30:	defff304 	addi	sp,sp,-52
     e34:	dfc00c15 	stw	ra,48(sp)
     e38:	df000b15 	stw	fp,44(sp)
     e3c:	df000b04 	addi	fp,sp,44
     e40:	e13ffc15 	stw	r4,-16(fp)
     e44:	e17ffd15 	stw	r5,-12(fp)
     e48:	e1bffe15 	stw	r6,-8(fp)
     e4c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
     e50:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
     e54:	e0bffd17 	ldw	r2,-12(fp)
     e58:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
     e5c:	00003906 	br	f44 <altera_avalon_jtag_uart_write+0x114>
     e60:	00003806 	br	f44 <altera_avalon_jtag_uart_write+0x114>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
     e64:	e0bffc17 	ldw	r2,-16(fp)
     e68:	10800c17 	ldw	r2,48(r2)
     e6c:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
     e70:	e0bffc17 	ldw	r2,-16(fp)
     e74:	10800d17 	ldw	r2,52(r2)
     e78:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
     e7c:	e0fff817 	ldw	r3,-32(fp)
     e80:	e0bff517 	ldw	r2,-44(fp)
     e84:	1880062e 	bgeu	r3,r2,ea0 <altera_avalon_jtag_uart_write+0x70>
        n = out - 1 - in;
     e88:	e0fff517 	ldw	r3,-44(fp)
     e8c:	e0bff817 	ldw	r2,-32(fp)
     e90:	1885c83a 	sub	r2,r3,r2
     e94:	10bfffc4 	addi	r2,r2,-1
     e98:	e0bff615 	stw	r2,-40(fp)
     e9c:	00000b06 	br	ecc <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
     ea0:	e0bff517 	ldw	r2,-44(fp)
     ea4:	10000526 	beq	r2,zero,ebc <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
     ea8:	00c20004 	movi	r3,2048
     eac:	e0bff817 	ldw	r2,-32(fp)
     eb0:	1885c83a 	sub	r2,r3,r2
     eb4:	e0bff615 	stw	r2,-40(fp)
     eb8:	00000406 	br	ecc <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
     ebc:	00c1ffc4 	movi	r3,2047
     ec0:	e0bff817 	ldw	r2,-32(fp)
     ec4:	1885c83a 	sub	r2,r3,r2
     ec8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
     ecc:	e0bff617 	ldw	r2,-40(fp)
     ed0:	1000011e 	bne	r2,zero,ed8 <altera_avalon_jtag_uart_write+0xa8>
        break;
     ed4:	00001d06 	br	f4c <altera_avalon_jtag_uart_write+0x11c>

      if (n > count)
     ed8:	e0fffe17 	ldw	r3,-8(fp)
     edc:	e0bff617 	ldw	r2,-40(fp)
     ee0:	1880022e 	bgeu	r3,r2,eec <altera_avalon_jtag_uart_write+0xbc>
        n = count;
     ee4:	e0bffe17 	ldw	r2,-8(fp)
     ee8:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
     eec:	e0bff817 	ldw	r2,-32(fp)
     ef0:	10820e04 	addi	r2,r2,2104
     ef4:	e0fffc17 	ldw	r3,-16(fp)
     ef8:	1885883a 	add	r2,r3,r2
     efc:	1009883a 	mov	r4,r2
     f00:	e17ffd17 	ldw	r5,-12(fp)
     f04:	e1bff617 	ldw	r6,-40(fp)
     f08:	00021700 	call	2170 <memcpy>
      ptr   += n;
     f0c:	e0fffd17 	ldw	r3,-12(fp)
     f10:	e0bff617 	ldw	r2,-40(fp)
     f14:	1885883a 	add	r2,r3,r2
     f18:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
     f1c:	e0fffe17 	ldw	r3,-8(fp)
     f20:	e0bff617 	ldw	r2,-40(fp)
     f24:	1885c83a 	sub	r2,r3,r2
     f28:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     f2c:	e0fff817 	ldw	r3,-32(fp)
     f30:	e0bff617 	ldw	r2,-40(fp)
     f34:	1885883a 	add	r2,r3,r2
     f38:	10c1ffcc 	andi	r3,r2,2047
     f3c:	e0bffc17 	ldw	r2,-16(fp)
     f40:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
     f44:	e0bffe17 	ldw	r2,-8(fp)
     f48:	00bfc616 	blt	zero,r2,e64 <__alt_mem_Onchip_SRAM_2+0xf7000e64>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     f4c:	0005303a 	rdctl	r2,status
     f50:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     f54:	e0fffa17 	ldw	r3,-24(fp)
     f58:	00bfff84 	movi	r2,-2
     f5c:	1884703a 	and	r2,r3,r2
     f60:	1001703a 	wrctl	status,r2
  
  return context;
     f64:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
     f68:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
     f6c:	e0bffc17 	ldw	r2,-16(fp)
     f70:	10800817 	ldw	r2,32(r2)
     f74:	10c00094 	ori	r3,r2,2
     f78:	e0bffc17 	ldw	r2,-16(fp)
     f7c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
     f80:	e0bffc17 	ldw	r2,-16(fp)
     f84:	10800017 	ldw	r2,0(r2)
     f88:	10800104 	addi	r2,r2,4
     f8c:	e0fffc17 	ldw	r3,-16(fp)
     f90:	18c00817 	ldw	r3,32(r3)
     f94:	10c00035 	stwio	r3,0(r2)
     f98:	e0bff917 	ldw	r2,-28(fp)
     f9c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     fa0:	e0bffb17 	ldw	r2,-20(fp)
     fa4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
     fa8:	e0bffe17 	ldw	r2,-8(fp)
     fac:	0080120e 	bge	zero,r2,ff8 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
     fb0:	e0bfff17 	ldw	r2,-4(fp)
     fb4:	1090000c 	andi	r2,r2,16384
     fb8:	10000126 	beq	r2,zero,fc0 <altera_avalon_jtag_uart_write+0x190>
        break;
     fbc:	00001006 	br	1000 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
     fc0:	0001883a 	nop
     fc4:	e0bffc17 	ldw	r2,-16(fp)
     fc8:	10c00d17 	ldw	r3,52(r2)
     fcc:	e0bff517 	ldw	r2,-44(fp)
     fd0:	1880051e 	bne	r3,r2,fe8 <altera_avalon_jtag_uart_write+0x1b8>
     fd4:	e0bffc17 	ldw	r2,-16(fp)
     fd8:	10c00917 	ldw	r3,36(r2)
     fdc:	e0bffc17 	ldw	r2,-16(fp)
     fe0:	10800117 	ldw	r2,4(r2)
     fe4:	18bff736 	bltu	r3,r2,fc4 <__alt_mem_Onchip_SRAM_2+0xf7000fc4>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
     fe8:	e0bffc17 	ldw	r2,-16(fp)
     fec:	10800917 	ldw	r2,36(r2)
     ff0:	10000126 	beq	r2,zero,ff8 <altera_avalon_jtag_uart_write+0x1c8>
         break;
     ff4:	00000206 	br	1000 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
     ff8:	e0bffe17 	ldw	r2,-8(fp)
     ffc:	00bf9816 	blt	zero,r2,e60 <__alt_mem_Onchip_SRAM_2+0xf7000e60>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    1000:	e0fffd17 	ldw	r3,-12(fp)
    1004:	e0bff717 	ldw	r2,-36(fp)
    1008:	18800426 	beq	r3,r2,101c <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
    100c:	e0fffd17 	ldw	r3,-12(fp)
    1010:	e0bff717 	ldw	r2,-36(fp)
    1014:	1885c83a 	sub	r2,r3,r2
    1018:	00000606 	br	1034 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
    101c:	e0bfff17 	ldw	r2,-4(fp)
    1020:	1090000c 	andi	r2,r2,16384
    1024:	10000226 	beq	r2,zero,1030 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
    1028:	00bffd44 	movi	r2,-11
    102c:	00000106 	br	1034 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    1030:	00bffec4 	movi	r2,-5
}
    1034:	e037883a 	mov	sp,fp
    1038:	dfc00117 	ldw	ra,4(sp)
    103c:	df000017 	ldw	fp,0(sp)
    1040:	dec00204 	addi	sp,sp,8
    1044:	f800283a 	ret

00001048 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    1048:	defff904 	addi	sp,sp,-28
    104c:	dfc00615 	stw	ra,24(sp)
    1050:	df000515 	stw	fp,20(sp)
    1054:	df000504 	addi	fp,sp,20
    1058:	e13ffe15 	stw	r4,-8(fp)
    105c:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    1060:	0007883a 	mov	r3,zero
    1064:	e0bffe17 	ldw	r2,-8(fp)
    1068:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    106c:	e0bffe17 	ldw	r2,-8(fp)
    1070:	10800104 	addi	r2,r2,4
    1074:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1078:	0005303a 	rdctl	r2,status
    107c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1080:	e0fffc17 	ldw	r3,-16(fp)
    1084:	00bfff84 	movi	r2,-2
    1088:	1884703a 	and	r2,r3,r2
    108c:	1001703a 	wrctl	status,r2
  
  return context;
    1090:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    1094:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
    1098:	0001c6c0 	call	1c6c <alt_tick>
    109c:	e0bffb17 	ldw	r2,-20(fp)
    10a0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    10a4:	e0bffd17 	ldw	r2,-12(fp)
    10a8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    10ac:	e037883a 	mov	sp,fp
    10b0:	dfc00117 	ldw	ra,4(sp)
    10b4:	df000017 	ldw	fp,0(sp)
    10b8:	dec00204 	addi	sp,sp,8
    10bc:	f800283a 	ret

000010c0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    10c0:	defff904 	addi	sp,sp,-28
    10c4:	dfc00615 	stw	ra,24(sp)
    10c8:	df000515 	stw	fp,20(sp)
    10cc:	df000504 	addi	fp,sp,20
    10d0:	e13ffc15 	stw	r4,-16(fp)
    10d4:	e17ffd15 	stw	r5,-12(fp)
    10d8:	e1bffe15 	stw	r6,-8(fp)
    10dc:	e1ffff15 	stw	r7,-4(fp)
    10e0:	e0bfff17 	ldw	r2,-4(fp)
    10e4:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    10e8:	00800034 	movhi	r2,0
    10ec:	10958204 	addi	r2,r2,22024
    10f0:	10800017 	ldw	r2,0(r2)
    10f4:	1000041e 	bne	r2,zero,1108 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
    10f8:	00800034 	movhi	r2,0
    10fc:	10958204 	addi	r2,r2,22024
    1100:	e0fffb17 	ldw	r3,-20(fp)
    1104:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    1108:	e0bffc17 	ldw	r2,-16(fp)
    110c:	10800104 	addi	r2,r2,4
    1110:	00c001c4 	movi	r3,7
    1114:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
    1118:	e13ffe17 	ldw	r4,-8(fp)
    111c:	e17ffc17 	ldw	r5,-16(fp)
    1120:	01800034 	movhi	r6,0
    1124:	31841204 	addi	r6,r6,4168
    1128:	00017040 	call	1704 <alt_irq_register>
#endif  
}
    112c:	e037883a 	mov	sp,fp
    1130:	dfc00117 	ldw	ra,4(sp)
    1134:	df000017 	ldw	fp,0(sp)
    1138:	dec00204 	addi	sp,sp,8
    113c:	f800283a 	ret

00001140 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    1140:	defff504 	addi	sp,sp,-44
    1144:	df000a15 	stw	fp,40(sp)
    1148:	df000a04 	addi	fp,sp,40
    114c:	e13ffc15 	stw	r4,-16(fp)
    1150:	e17ffd15 	stw	r5,-12(fp)
    1154:	e1bffe15 	stw	r6,-8(fp)
    1158:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    115c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    1160:	00800034 	movhi	r2,0
    1164:	10958204 	addi	r2,r2,22024
    1168:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    116c:	10003f26 	beq	r2,zero,126c <alt_alarm_start+0x12c>
  {
    if (alarm)
    1170:	e0bffc17 	ldw	r2,-16(fp)
    1174:	10003b26 	beq	r2,zero,1264 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
    1178:	e0bffc17 	ldw	r2,-16(fp)
    117c:	e0fffe17 	ldw	r3,-8(fp)
    1180:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    1184:	e0bffc17 	ldw	r2,-16(fp)
    1188:	e0ffff17 	ldw	r3,-4(fp)
    118c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1190:	0005303a 	rdctl	r2,status
    1194:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1198:	e0fff817 	ldw	r3,-32(fp)
    119c:	00bfff84 	movi	r2,-2
    11a0:	1884703a 	and	r2,r3,r2
    11a4:	1001703a 	wrctl	status,r2
  
  return context;
    11a8:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    11ac:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    11b0:	00800034 	movhi	r2,0
    11b4:	10958304 	addi	r2,r2,22028
    11b8:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    11bc:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    11c0:	e0fffd17 	ldw	r3,-12(fp)
    11c4:	e0bff617 	ldw	r2,-40(fp)
    11c8:	1885883a 	add	r2,r3,r2
    11cc:	10c00044 	addi	r3,r2,1
    11d0:	e0bffc17 	ldw	r2,-16(fp)
    11d4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    11d8:	e0bffc17 	ldw	r2,-16(fp)
    11dc:	10c00217 	ldw	r3,8(r2)
    11e0:	e0bff617 	ldw	r2,-40(fp)
    11e4:	1880042e 	bgeu	r3,r2,11f8 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
    11e8:	e0bffc17 	ldw	r2,-16(fp)
    11ec:	00c00044 	movi	r3,1
    11f0:	10c00405 	stb	r3,16(r2)
    11f4:	00000206 	br	1200 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
    11f8:	e0bffc17 	ldw	r2,-16(fp)
    11fc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    1200:	e0bffc17 	ldw	r2,-16(fp)
    1204:	00c00034 	movhi	r3,0
    1208:	18cf9704 	addi	r3,r3,15964
    120c:	e0fff915 	stw	r3,-28(fp)
    1210:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    1214:	e0bffa17 	ldw	r2,-24(fp)
    1218:	e0fff917 	ldw	r3,-28(fp)
    121c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    1220:	e0bff917 	ldw	r2,-28(fp)
    1224:	10c00017 	ldw	r3,0(r2)
    1228:	e0bffa17 	ldw	r2,-24(fp)
    122c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    1230:	e0bff917 	ldw	r2,-28(fp)
    1234:	10800017 	ldw	r2,0(r2)
    1238:	e0fffa17 	ldw	r3,-24(fp)
    123c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    1240:	e0bff917 	ldw	r2,-28(fp)
    1244:	e0fffa17 	ldw	r3,-24(fp)
    1248:	10c00015 	stw	r3,0(r2)
    124c:	e0bff717 	ldw	r2,-36(fp)
    1250:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1254:	e0bffb17 	ldw	r2,-20(fp)
    1258:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    125c:	0005883a 	mov	r2,zero
    1260:	00000306 	br	1270 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
    1264:	00bffa84 	movi	r2,-22
    1268:	00000106 	br	1270 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
    126c:	00bfde84 	movi	r2,-134
  }
}
    1270:	e037883a 	mov	sp,fp
    1274:	df000017 	ldw	fp,0(sp)
    1278:	dec00104 	addi	sp,sp,4
    127c:	f800283a 	ret

00001280 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    1280:	defffe04 	addi	sp,sp,-8
    1284:	dfc00115 	stw	ra,4(sp)
    1288:	df000015 	stw	fp,0(sp)
    128c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    1290:	00800034 	movhi	r2,0
    1294:	108f9504 	addi	r2,r2,15956
    1298:	10800017 	ldw	r2,0(r2)
    129c:	10000526 	beq	r2,zero,12b4 <alt_get_errno+0x34>
    12a0:	00800034 	movhi	r2,0
    12a4:	108f9504 	addi	r2,r2,15956
    12a8:	10800017 	ldw	r2,0(r2)
    12ac:	103ee83a 	callr	r2
    12b0:	00000206 	br	12bc <alt_get_errno+0x3c>
    12b4:	00800034 	movhi	r2,0
    12b8:	10958504 	addi	r2,r2,22036
}
    12bc:	e037883a 	mov	sp,fp
    12c0:	dfc00117 	ldw	ra,4(sp)
    12c4:	df000017 	ldw	fp,0(sp)
    12c8:	dec00204 	addi	sp,sp,8
    12cc:	f800283a 	ret

000012d0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    12d0:	defffb04 	addi	sp,sp,-20
    12d4:	dfc00415 	stw	ra,16(sp)
    12d8:	df000315 	stw	fp,12(sp)
    12dc:	df000304 	addi	fp,sp,12
    12e0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    12e4:	e0bfff17 	ldw	r2,-4(fp)
    12e8:	10000816 	blt	r2,zero,130c <close+0x3c>
    12ec:	e13fff17 	ldw	r4,-4(fp)
    12f0:	01400304 	movi	r5,12
    12f4:	00025c80 	call	25c8 <__mulsi3>
    12f8:	1007883a 	mov	r3,r2
    12fc:	00800034 	movhi	r2,0
    1300:	108e2704 	addi	r2,r2,14492
    1304:	1885883a 	add	r2,r3,r2
    1308:	00000106 	br	1310 <close+0x40>
    130c:	0005883a 	mov	r2,zero
    1310:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    1314:	e0bffd17 	ldw	r2,-12(fp)
    1318:	10001826 	beq	r2,zero,137c <close+0xac>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    131c:	e0bffd17 	ldw	r2,-12(fp)
    1320:	10800017 	ldw	r2,0(r2)
    1324:	10800417 	ldw	r2,16(r2)
    1328:	10000626 	beq	r2,zero,1344 <close+0x74>
    132c:	e0bffd17 	ldw	r2,-12(fp)
    1330:	10800017 	ldw	r2,0(r2)
    1334:	10800417 	ldw	r2,16(r2)
    1338:	e13ffd17 	ldw	r4,-12(fp)
    133c:	103ee83a 	callr	r2
    1340:	00000106 	br	1348 <close+0x78>
    1344:	0005883a 	mov	r2,zero
    1348:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    134c:	e13fff17 	ldw	r4,-4(fp)
    1350:	0001b540 	call	1b54 <alt_release_fd>
    if (rval < 0)
    1354:	e0bffe17 	ldw	r2,-8(fp)
    1358:	1000060e 	bge	r2,zero,1374 <close+0xa4>
    {
      ALT_ERRNO = -rval;
    135c:	00012800 	call	1280 <alt_get_errno>
    1360:	e0fffe17 	ldw	r3,-8(fp)
    1364:	00c7c83a 	sub	r3,zero,r3
    1368:	10c00015 	stw	r3,0(r2)
      return -1;
    136c:	00bfffc4 	movi	r2,-1
    1370:	00000606 	br	138c <close+0xbc>
    }
    return 0;
    1374:	0005883a 	mov	r2,zero
    1378:	00000406 	br	138c <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    137c:	00012800 	call	1280 <alt_get_errno>
    1380:	00c01444 	movi	r3,81
    1384:	10c00015 	stw	r3,0(r2)
    return -1;
    1388:	00bfffc4 	movi	r2,-1
  }
}
    138c:	e037883a 	mov	sp,fp
    1390:	dfc00117 	ldw	ra,4(sp)
    1394:	df000017 	ldw	fp,0(sp)
    1398:	dec00204 	addi	sp,sp,8
    139c:	f800283a 	ret

000013a0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    13a0:	deffff04 	addi	sp,sp,-4
    13a4:	df000015 	stw	fp,0(sp)
    13a8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    13ac:	e037883a 	mov	sp,fp
    13b0:	df000017 	ldw	fp,0(sp)
    13b4:	dec00104 	addi	sp,sp,4
    13b8:	f800283a 	ret

000013bc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    13bc:	defffc04 	addi	sp,sp,-16
    13c0:	df000315 	stw	fp,12(sp)
    13c4:	df000304 	addi	fp,sp,12
    13c8:	e13ffd15 	stw	r4,-12(fp)
    13cc:	e17ffe15 	stw	r5,-8(fp)
    13d0:	e1bfff15 	stw	r6,-4(fp)
  return len;
    13d4:	e0bfff17 	ldw	r2,-4(fp)
}
    13d8:	e037883a 	mov	sp,fp
    13dc:	df000017 	ldw	fp,0(sp)
    13e0:	dec00104 	addi	sp,sp,4
    13e4:	f800283a 	ret

000013e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    13e8:	defffe04 	addi	sp,sp,-8
    13ec:	dfc00115 	stw	ra,4(sp)
    13f0:	df000015 	stw	fp,0(sp)
    13f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    13f8:	00800034 	movhi	r2,0
    13fc:	108f9504 	addi	r2,r2,15956
    1400:	10800017 	ldw	r2,0(r2)
    1404:	10000526 	beq	r2,zero,141c <alt_get_errno+0x34>
    1408:	00800034 	movhi	r2,0
    140c:	108f9504 	addi	r2,r2,15956
    1410:	10800017 	ldw	r2,0(r2)
    1414:	103ee83a 	callr	r2
    1418:	00000206 	br	1424 <alt_get_errno+0x3c>
    141c:	00800034 	movhi	r2,0
    1420:	10958504 	addi	r2,r2,22036
}
    1424:	e037883a 	mov	sp,fp
    1428:	dfc00117 	ldw	ra,4(sp)
    142c:	df000017 	ldw	fp,0(sp)
    1430:	dec00204 	addi	sp,sp,8
    1434:	f800283a 	ret

00001438 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    1438:	defffa04 	addi	sp,sp,-24
    143c:	dfc00515 	stw	ra,20(sp)
    1440:	df000415 	stw	fp,16(sp)
    1444:	df000404 	addi	fp,sp,16
    1448:	e13ffe15 	stw	r4,-8(fp)
    144c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    1450:	e0bffe17 	ldw	r2,-8(fp)
    1454:	10000326 	beq	r2,zero,1464 <alt_dev_llist_insert+0x2c>
    1458:	e0bffe17 	ldw	r2,-8(fp)
    145c:	10800217 	ldw	r2,8(r2)
    1460:	1000051e 	bne	r2,zero,1478 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
    1464:	00013e80 	call	13e8 <alt_get_errno>
    1468:	00c00584 	movi	r3,22
    146c:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    1470:	00bffa84 	movi	r2,-22
    1474:	00001306 	br	14c4 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    1478:	e0bffe17 	ldw	r2,-8(fp)
    147c:	e0ffff17 	ldw	r3,-4(fp)
    1480:	e0fffc15 	stw	r3,-16(fp)
    1484:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    1488:	e0bffd17 	ldw	r2,-12(fp)
    148c:	e0fffc17 	ldw	r3,-16(fp)
    1490:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    1494:	e0bffc17 	ldw	r2,-16(fp)
    1498:	10c00017 	ldw	r3,0(r2)
    149c:	e0bffd17 	ldw	r2,-12(fp)
    14a0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    14a4:	e0bffc17 	ldw	r2,-16(fp)
    14a8:	10800017 	ldw	r2,0(r2)
    14ac:	e0fffd17 	ldw	r3,-12(fp)
    14b0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    14b4:	e0bffc17 	ldw	r2,-16(fp)
    14b8:	e0fffd17 	ldw	r3,-12(fp)
    14bc:	10c00015 	stw	r3,0(r2)

  return 0;  
    14c0:	0005883a 	mov	r2,zero
}
    14c4:	e037883a 	mov	sp,fp
    14c8:	dfc00117 	ldw	ra,4(sp)
    14cc:	df000017 	ldw	fp,0(sp)
    14d0:	dec00204 	addi	sp,sp,8
    14d4:	f800283a 	ret

000014d8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    14d8:	defffd04 	addi	sp,sp,-12
    14dc:	dfc00215 	stw	ra,8(sp)
    14e0:	df000115 	stw	fp,4(sp)
    14e4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    14e8:	00800034 	movhi	r2,0
    14ec:	10898804 	addi	r2,r2,9760
    14f0:	e0bfff15 	stw	r2,-4(fp)
    14f4:	00000606 	br	1510 <_do_ctors+0x38>
        (*ctor) (); 
    14f8:	e0bfff17 	ldw	r2,-4(fp)
    14fc:	10800017 	ldw	r2,0(r2)
    1500:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    1504:	e0bfff17 	ldw	r2,-4(fp)
    1508:	10bfff04 	addi	r2,r2,-4
    150c:	e0bfff15 	stw	r2,-4(fp)
    1510:	e0ffff17 	ldw	r3,-4(fp)
    1514:	00800034 	movhi	r2,0
    1518:	10898904 	addi	r2,r2,9764
    151c:	18bff62e 	bgeu	r3,r2,14f8 <__alt_mem_Onchip_SRAM_2+0xf70014f8>
        (*ctor) (); 
}
    1520:	e037883a 	mov	sp,fp
    1524:	dfc00117 	ldw	ra,4(sp)
    1528:	df000017 	ldw	fp,0(sp)
    152c:	dec00204 	addi	sp,sp,8
    1530:	f800283a 	ret

00001534 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    1534:	defffd04 	addi	sp,sp,-12
    1538:	dfc00215 	stw	ra,8(sp)
    153c:	df000115 	stw	fp,4(sp)
    1540:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    1544:	00800034 	movhi	r2,0
    1548:	10898804 	addi	r2,r2,9760
    154c:	e0bfff15 	stw	r2,-4(fp)
    1550:	00000606 	br	156c <_do_dtors+0x38>
        (*dtor) (); 
    1554:	e0bfff17 	ldw	r2,-4(fp)
    1558:	10800017 	ldw	r2,0(r2)
    155c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    1560:	e0bfff17 	ldw	r2,-4(fp)
    1564:	10bfff04 	addi	r2,r2,-4
    1568:	e0bfff15 	stw	r2,-4(fp)
    156c:	e0ffff17 	ldw	r3,-4(fp)
    1570:	00800034 	movhi	r2,0
    1574:	10898904 	addi	r2,r2,9764
    1578:	18bff62e 	bgeu	r3,r2,1554 <__alt_mem_Onchip_SRAM_2+0xf7001554>
        (*dtor) (); 
}
    157c:	e037883a 	mov	sp,fp
    1580:	dfc00117 	ldw	ra,4(sp)
    1584:	df000017 	ldw	fp,0(sp)
    1588:	dec00204 	addi	sp,sp,8
    158c:	f800283a 	ret

00001590 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    1590:	deffff04 	addi	sp,sp,-4
    1594:	df000015 	stw	fp,0(sp)
    1598:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    159c:	e037883a 	mov	sp,fp
    15a0:	df000017 	ldw	fp,0(sp)
    15a4:	dec00104 	addi	sp,sp,4
    15a8:	f800283a 	ret

000015ac <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    15ac:	defff804 	addi	sp,sp,-32
    15b0:	dfc00715 	stw	ra,28(sp)
    15b4:	df000615 	stw	fp,24(sp)
    15b8:	dc000515 	stw	r16,20(sp)
    15bc:	df000604 	addi	fp,sp,24
    15c0:	e13ffb15 	stw	r4,-20(fp)
    15c4:	e17ffc15 	stw	r5,-16(fp)
    15c8:	e1bffd15 	stw	r6,-12(fp)
    15cc:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
    15d0:	e13ffc17 	ldw	r4,-16(fp)
    15d4:	e17ffd17 	ldw	r5,-12(fp)
    15d8:	e1bffe17 	ldw	r6,-8(fp)
    15dc:	00019f80 	call	19f8 <open>
    15e0:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
    15e4:	e0bffa17 	ldw	r2,-24(fp)
    15e8:	10002216 	blt	r2,zero,1674 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    15ec:	04000034 	movhi	r16,0
    15f0:	840e2704 	addi	r16,r16,14492
    15f4:	e0bffa17 	ldw	r2,-24(fp)
    15f8:	1009883a 	mov	r4,r2
    15fc:	01400304 	movi	r5,12
    1600:	00025c80 	call	25c8 <__mulsi3>
    1604:	8085883a 	add	r2,r16,r2
    1608:	10c00017 	ldw	r3,0(r2)
    160c:	e0bffb17 	ldw	r2,-20(fp)
    1610:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    1614:	04000034 	movhi	r16,0
    1618:	840e2704 	addi	r16,r16,14492
    161c:	e0bffa17 	ldw	r2,-24(fp)
    1620:	1009883a 	mov	r4,r2
    1624:	01400304 	movi	r5,12
    1628:	00025c80 	call	25c8 <__mulsi3>
    162c:	8085883a 	add	r2,r16,r2
    1630:	10800104 	addi	r2,r2,4
    1634:	10c00017 	ldw	r3,0(r2)
    1638:	e0bffb17 	ldw	r2,-20(fp)
    163c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    1640:	04000034 	movhi	r16,0
    1644:	840e2704 	addi	r16,r16,14492
    1648:	e0bffa17 	ldw	r2,-24(fp)
    164c:	1009883a 	mov	r4,r2
    1650:	01400304 	movi	r5,12
    1654:	00025c80 	call	25c8 <__mulsi3>
    1658:	8085883a 	add	r2,r16,r2
    165c:	10800204 	addi	r2,r2,8
    1660:	10c00017 	ldw	r3,0(r2)
    1664:	e0bffb17 	ldw	r2,-20(fp)
    1668:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    166c:	e13ffa17 	ldw	r4,-24(fp)
    1670:	0001b540 	call	1b54 <alt_release_fd>
  }
} 
    1674:	e6ffff04 	addi	sp,fp,-4
    1678:	dfc00217 	ldw	ra,8(sp)
    167c:	df000117 	ldw	fp,4(sp)
    1680:	dc000017 	ldw	r16,0(sp)
    1684:	dec00304 	addi	sp,sp,12
    1688:	f800283a 	ret

0000168c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    168c:	defffb04 	addi	sp,sp,-20
    1690:	dfc00415 	stw	ra,16(sp)
    1694:	df000315 	stw	fp,12(sp)
    1698:	df000304 	addi	fp,sp,12
    169c:	e13ffd15 	stw	r4,-12(fp)
    16a0:	e17ffe15 	stw	r5,-8(fp)
    16a4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    16a8:	01000034 	movhi	r4,0
    16ac:	210e2a04 	addi	r4,r4,14504
    16b0:	e17ffd17 	ldw	r5,-12(fp)
    16b4:	01800044 	movi	r6,1
    16b8:	01c07fc4 	movi	r7,511
    16bc:	00015ac0 	call	15ac <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    16c0:	01000034 	movhi	r4,0
    16c4:	210e2704 	addi	r4,r4,14492
    16c8:	e17ffe17 	ldw	r5,-8(fp)
    16cc:	000d883a 	mov	r6,zero
    16d0:	01c07fc4 	movi	r7,511
    16d4:	00015ac0 	call	15ac <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    16d8:	01000034 	movhi	r4,0
    16dc:	210e2d04 	addi	r4,r4,14516
    16e0:	e17fff17 	ldw	r5,-4(fp)
    16e4:	01800044 	movi	r6,1
    16e8:	01c07fc4 	movi	r7,511
    16ec:	00015ac0 	call	15ac <alt_open_fd>
}  
    16f0:	e037883a 	mov	sp,fp
    16f4:	dfc00117 	ldw	ra,4(sp)
    16f8:	df000017 	ldw	fp,0(sp)
    16fc:	dec00204 	addi	sp,sp,8
    1700:	f800283a 	ret

00001704 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
    1704:	defff004 	addi	sp,sp,-64
    1708:	df000f15 	stw	fp,60(sp)
    170c:	df000f04 	addi	fp,sp,60
    1710:	e13ffd15 	stw	r4,-12(fp)
    1714:	e17ffe15 	stw	r5,-8(fp)
    1718:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
    171c:	00bffa84 	movi	r2,-22
    1720:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    1724:	e0bffd17 	ldw	r2,-12(fp)
    1728:	10800828 	cmpgeui	r2,r2,32
    172c:	10005c1e 	bne	r2,zero,18a0 <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1730:	0005303a 	rdctl	r2,status
    1734:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1738:	e0fff317 	ldw	r3,-52(fp)
    173c:	00bfff84 	movi	r2,-2
    1740:	1884703a 	and	r2,r3,r2
    1744:	1001703a 	wrctl	status,r2
  
  return context;
    1748:	e0bff317 	ldw	r2,-52(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
    174c:	e0bff215 	stw	r2,-56(fp)

    alt_irq[id].handler = handler;
    1750:	00c00034 	movhi	r3,0
    1754:	18d58604 	addi	r3,r3,22040
    1758:	e0bffd17 	ldw	r2,-12(fp)
    175c:	100490fa 	slli	r2,r2,3
    1760:	1885883a 	add	r2,r3,r2
    1764:	e0ffff17 	ldw	r3,-4(fp)
    1768:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
    176c:	00c00034 	movhi	r3,0
    1770:	18d58604 	addi	r3,r3,22040
    1774:	e0bffd17 	ldw	r2,-12(fp)
    1778:	100490fa 	slli	r2,r2,3
    177c:	1885883a 	add	r2,r3,r2
    1780:	10800104 	addi	r2,r2,4
    1784:	e0fffe17 	ldw	r3,-8(fp)
    1788:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    178c:	e0bfff17 	ldw	r2,-4(fp)
    1790:	10001f26 	beq	r2,zero,1810 <alt_irq_register+0x10c>
    1794:	e0bffd17 	ldw	r2,-12(fp)
    1798:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    179c:	0005303a 	rdctl	r2,status
    17a0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    17a4:	e0fff517 	ldw	r3,-44(fp)
    17a8:	00bfff84 	movi	r2,-2
    17ac:	1884703a 	and	r2,r3,r2
    17b0:	1001703a 	wrctl	status,r2
  
  return context;
    17b4:	e0bff517 	ldw	r2,-44(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    17b8:	e0bff615 	stw	r2,-40(fp)

  alt_irq_active |= (1 << id);
    17bc:	e0bff417 	ldw	r2,-48(fp)
    17c0:	00c00044 	movi	r3,1
    17c4:	1884983a 	sll	r2,r3,r2
    17c8:	1007883a 	mov	r3,r2
    17cc:	00800034 	movhi	r2,0
    17d0:	10958104 	addi	r2,r2,22020
    17d4:	10800017 	ldw	r2,0(r2)
    17d8:	1886b03a 	or	r3,r3,r2
    17dc:	00800034 	movhi	r2,0
    17e0:	10958104 	addi	r2,r2,22020
    17e4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    17e8:	00800034 	movhi	r2,0
    17ec:	10958104 	addi	r2,r2,22020
    17f0:	10800017 	ldw	r2,0(r2)
    17f4:	100170fa 	wrctl	ienable,r2
    17f8:	e0bff617 	ldw	r2,-40(fp)
    17fc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1800:	e0bff717 	ldw	r2,-36(fp)
    1804:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    1808:	0005883a 	mov	r2,zero
    180c:	00001f06 	br	188c <alt_irq_register+0x188>
    1810:	e0bffd17 	ldw	r2,-12(fp)
    1814:	e0bff815 	stw	r2,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1818:	0005303a 	rdctl	r2,status
    181c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1820:	e0fff917 	ldw	r3,-28(fp)
    1824:	00bfff84 	movi	r2,-2
    1828:	1884703a 	and	r2,r3,r2
    182c:	1001703a 	wrctl	status,r2
  
  return context;
    1830:	e0bff917 	ldw	r2,-28(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    1834:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active &= ~(1 << id);
    1838:	e0bff817 	ldw	r2,-32(fp)
    183c:	00c00044 	movi	r3,1
    1840:	1884983a 	sll	r2,r3,r2
    1844:	0084303a 	nor	r2,zero,r2
    1848:	1007883a 	mov	r3,r2
    184c:	00800034 	movhi	r2,0
    1850:	10958104 	addi	r2,r2,22020
    1854:	10800017 	ldw	r2,0(r2)
    1858:	1886703a 	and	r3,r3,r2
    185c:	00800034 	movhi	r2,0
    1860:	10958104 	addi	r2,r2,22020
    1864:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    1868:	00800034 	movhi	r2,0
    186c:	10958104 	addi	r2,r2,22020
    1870:	10800017 	ldw	r2,0(r2)
    1874:	100170fa 	wrctl	ienable,r2
    1878:	e0bffa17 	ldw	r2,-24(fp)
    187c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1880:	e0bffb17 	ldw	r2,-20(fp)
    1884:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    1888:	0005883a 	mov	r2,zero
    188c:	e0bff115 	stw	r2,-60(fp)
    1890:	e0bff217 	ldw	r2,-56(fp)
    1894:	e0bffc15 	stw	r2,-16(fp)
    1898:	e0bffc17 	ldw	r2,-16(fp)
    189c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
    18a0:	e0bff117 	ldw	r2,-60(fp)
}
    18a4:	e037883a 	mov	sp,fp
    18a8:	df000017 	ldw	fp,0(sp)
    18ac:	dec00104 	addi	sp,sp,4
    18b0:	f800283a 	ret

000018b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    18b4:	defffe04 	addi	sp,sp,-8
    18b8:	dfc00115 	stw	ra,4(sp)
    18bc:	df000015 	stw	fp,0(sp)
    18c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    18c4:	00800034 	movhi	r2,0
    18c8:	108f9504 	addi	r2,r2,15956
    18cc:	10800017 	ldw	r2,0(r2)
    18d0:	10000526 	beq	r2,zero,18e8 <alt_get_errno+0x34>
    18d4:	00800034 	movhi	r2,0
    18d8:	108f9504 	addi	r2,r2,15956
    18dc:	10800017 	ldw	r2,0(r2)
    18e0:	103ee83a 	callr	r2
    18e4:	00000206 	br	18f0 <alt_get_errno+0x3c>
    18e8:	00800034 	movhi	r2,0
    18ec:	10958504 	addi	r2,r2,22036
}
    18f0:	e037883a 	mov	sp,fp
    18f4:	dfc00117 	ldw	ra,4(sp)
    18f8:	df000017 	ldw	fp,0(sp)
    18fc:	dec00204 	addi	sp,sp,8
    1900:	f800283a 	ret

00001904 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    1904:	defffb04 	addi	sp,sp,-20
    1908:	dfc00415 	stw	ra,16(sp)
    190c:	df000315 	stw	fp,12(sp)
    1910:	dc000215 	stw	r16,8(sp)
    1914:	df000304 	addi	fp,sp,12
    1918:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    191c:	e0bffe17 	ldw	r2,-8(fp)
    1920:	10800217 	ldw	r2,8(r2)
    1924:	10d00034 	orhi	r3,r2,16384
    1928:	e0bffe17 	ldw	r2,-8(fp)
    192c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    1930:	e03ffd15 	stw	zero,-12(fp)
    1934:	00002306 	br	19c4 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    1938:	04000034 	movhi	r16,0
    193c:	840e2704 	addi	r16,r16,14492
    1940:	e0bffd17 	ldw	r2,-12(fp)
    1944:	1009883a 	mov	r4,r2
    1948:	01400304 	movi	r5,12
    194c:	00025c80 	call	25c8 <__mulsi3>
    1950:	8085883a 	add	r2,r16,r2
    1954:	10c00017 	ldw	r3,0(r2)
    1958:	e0bffe17 	ldw	r2,-8(fp)
    195c:	10800017 	ldw	r2,0(r2)
    1960:	1880151e 	bne	r3,r2,19b8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    1964:	04000034 	movhi	r16,0
    1968:	840e2704 	addi	r16,r16,14492
    196c:	e0bffd17 	ldw	r2,-12(fp)
    1970:	1009883a 	mov	r4,r2
    1974:	01400304 	movi	r5,12
    1978:	00025c80 	call	25c8 <__mulsi3>
    197c:	8085883a 	add	r2,r16,r2
    1980:	10800204 	addi	r2,r2,8
    1984:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    1988:	10000b0e 	bge	r2,zero,19b8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    198c:	e13ffd17 	ldw	r4,-12(fp)
    1990:	01400304 	movi	r5,12
    1994:	00025c80 	call	25c8 <__mulsi3>
    1998:	1007883a 	mov	r3,r2
    199c:	00800034 	movhi	r2,0
    19a0:	108e2704 	addi	r2,r2,14492
    19a4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    19a8:	e0bffe17 	ldw	r2,-8(fp)
    19ac:	18800226 	beq	r3,r2,19b8 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    19b0:	00bffcc4 	movi	r2,-13
    19b4:	00000a06 	br	19e0 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    19b8:	e0bffd17 	ldw	r2,-12(fp)
    19bc:	10800044 	addi	r2,r2,1
    19c0:	e0bffd15 	stw	r2,-12(fp)
    19c4:	00800034 	movhi	r2,0
    19c8:	108f9404 	addi	r2,r2,15952
    19cc:	10800017 	ldw	r2,0(r2)
    19d0:	1007883a 	mov	r3,r2
    19d4:	e0bffd17 	ldw	r2,-12(fp)
    19d8:	18bfd72e 	bgeu	r3,r2,1938 <__alt_mem_Onchip_SRAM_2+0xf7001938>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    19dc:	0005883a 	mov	r2,zero
}
    19e0:	e6ffff04 	addi	sp,fp,-4
    19e4:	dfc00217 	ldw	ra,8(sp)
    19e8:	df000117 	ldw	fp,4(sp)
    19ec:	dc000017 	ldw	r16,0(sp)
    19f0:	dec00304 	addi	sp,sp,12
    19f4:	f800283a 	ret

000019f8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    19f8:	defff604 	addi	sp,sp,-40
    19fc:	dfc00915 	stw	ra,36(sp)
    1a00:	df000815 	stw	fp,32(sp)
    1a04:	df000804 	addi	fp,sp,32
    1a08:	e13ffd15 	stw	r4,-12(fp)
    1a0c:	e17ffe15 	stw	r5,-8(fp)
    1a10:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    1a14:	00bfffc4 	movi	r2,-1
    1a18:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    1a1c:	00bffb44 	movi	r2,-19
    1a20:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    1a24:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    1a28:	e13ffd17 	ldw	r4,-12(fp)
    1a2c:	01400034 	movhi	r5,0
    1a30:	294f9204 	addi	r5,r5,15944
    1a34:	0001d900 	call	1d90 <alt_find_dev>
    1a38:	e0bff815 	stw	r2,-32(fp)
    1a3c:	e0bff817 	ldw	r2,-32(fp)
    1a40:	1000051e 	bne	r2,zero,1a58 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    1a44:	e13ffd17 	ldw	r4,-12(fp)
    1a48:	0001e200 	call	1e20 <alt_find_file>
    1a4c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    1a50:	00800044 	movi	r2,1
    1a54:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    1a58:	e0bff817 	ldw	r2,-32(fp)
    1a5c:	10002b26 	beq	r2,zero,1b0c <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
    1a60:	e13ff817 	ldw	r4,-32(fp)
    1a64:	0001f340 	call	1f34 <alt_get_fd>
    1a68:	e0bff915 	stw	r2,-28(fp)
    1a6c:	e0bff917 	ldw	r2,-28(fp)
    1a70:	1000030e 	bge	r2,zero,1a80 <open+0x88>
    {
      status = index;
    1a74:	e0bff917 	ldw	r2,-28(fp)
    1a78:	e0bffa15 	stw	r2,-24(fp)
    1a7c:	00002506 	br	1b14 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
    1a80:	e13ff917 	ldw	r4,-28(fp)
    1a84:	01400304 	movi	r5,12
    1a88:	00025c80 	call	25c8 <__mulsi3>
    1a8c:	1007883a 	mov	r3,r2
    1a90:	00800034 	movhi	r2,0
    1a94:	108e2704 	addi	r2,r2,14492
    1a98:	1885883a 	add	r2,r3,r2
    1a9c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    1aa0:	e0fffe17 	ldw	r3,-8(fp)
    1aa4:	00900034 	movhi	r2,16384
    1aa8:	10bfffc4 	addi	r2,r2,-1
    1aac:	1886703a 	and	r3,r3,r2
    1ab0:	e0bffc17 	ldw	r2,-16(fp)
    1ab4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    1ab8:	e0bffb17 	ldw	r2,-20(fp)
    1abc:	1000051e 	bne	r2,zero,1ad4 <open+0xdc>
    1ac0:	e13ffc17 	ldw	r4,-16(fp)
    1ac4:	00019040 	call	1904 <alt_file_locked>
    1ac8:	e0bffa15 	stw	r2,-24(fp)
    1acc:	e0bffa17 	ldw	r2,-24(fp)
    1ad0:	10001016 	blt	r2,zero,1b14 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    1ad4:	e0bff817 	ldw	r2,-32(fp)
    1ad8:	10800317 	ldw	r2,12(r2)
    1adc:	10000826 	beq	r2,zero,1b00 <open+0x108>
    1ae0:	e0bff817 	ldw	r2,-32(fp)
    1ae4:	10800317 	ldw	r2,12(r2)
    1ae8:	e13ffc17 	ldw	r4,-16(fp)
    1aec:	e17ffd17 	ldw	r5,-12(fp)
    1af0:	e1bffe17 	ldw	r6,-8(fp)
    1af4:	e1ffff17 	ldw	r7,-4(fp)
    1af8:	103ee83a 	callr	r2
    1afc:	00000106 	br	1b04 <open+0x10c>
    1b00:	0005883a 	mov	r2,zero
    1b04:	e0bffa15 	stw	r2,-24(fp)
    1b08:	00000206 	br	1b14 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
    1b0c:	00bffb44 	movi	r2,-19
    1b10:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    1b14:	e0bffa17 	ldw	r2,-24(fp)
    1b18:	1000080e 	bge	r2,zero,1b3c <open+0x144>
  {
    alt_release_fd (index);  
    1b1c:	e13ff917 	ldw	r4,-28(fp)
    1b20:	0001b540 	call	1b54 <alt_release_fd>
    ALT_ERRNO = -status;
    1b24:	00018b40 	call	18b4 <alt_get_errno>
    1b28:	e0fffa17 	ldw	r3,-24(fp)
    1b2c:	00c7c83a 	sub	r3,zero,r3
    1b30:	10c00015 	stw	r3,0(r2)
    return -1;
    1b34:	00bfffc4 	movi	r2,-1
    1b38:	00000106 	br	1b40 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
    1b3c:	e0bff917 	ldw	r2,-28(fp)
}
    1b40:	e037883a 	mov	sp,fp
    1b44:	dfc00117 	ldw	ra,4(sp)
    1b48:	df000017 	ldw	fp,0(sp)
    1b4c:	dec00204 	addi	sp,sp,8
    1b50:	f800283a 	ret

00001b54 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    1b54:	defffc04 	addi	sp,sp,-16
    1b58:	dfc00315 	stw	ra,12(sp)
    1b5c:	df000215 	stw	fp,8(sp)
    1b60:	dc000115 	stw	r16,4(sp)
    1b64:	df000204 	addi	fp,sp,8
    1b68:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    1b6c:	e0bffe17 	ldw	r2,-8(fp)
    1b70:	108000d0 	cmplti	r2,r2,3
    1b74:	1000111e 	bne	r2,zero,1bbc <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    1b78:	04000034 	movhi	r16,0
    1b7c:	840e2704 	addi	r16,r16,14492
    1b80:	e0bffe17 	ldw	r2,-8(fp)
    1b84:	1009883a 	mov	r4,r2
    1b88:	01400304 	movi	r5,12
    1b8c:	00025c80 	call	25c8 <__mulsi3>
    1b90:	8085883a 	add	r2,r16,r2
    1b94:	10800204 	addi	r2,r2,8
    1b98:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    1b9c:	04000034 	movhi	r16,0
    1ba0:	840e2704 	addi	r16,r16,14492
    1ba4:	e0bffe17 	ldw	r2,-8(fp)
    1ba8:	1009883a 	mov	r4,r2
    1bac:	01400304 	movi	r5,12
    1bb0:	00025c80 	call	25c8 <__mulsi3>
    1bb4:	8085883a 	add	r2,r16,r2
    1bb8:	10000015 	stw	zero,0(r2)
  }
}
    1bbc:	e6ffff04 	addi	sp,fp,-4
    1bc0:	dfc00217 	ldw	ra,8(sp)
    1bc4:	df000117 	ldw	fp,4(sp)
    1bc8:	dc000017 	ldw	r16,0(sp)
    1bcc:	dec00304 	addi	sp,sp,12
    1bd0:	f800283a 	ret

00001bd4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    1bd4:	defffa04 	addi	sp,sp,-24
    1bd8:	df000515 	stw	fp,20(sp)
    1bdc:	df000504 	addi	fp,sp,20
    1be0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1be4:	0005303a 	rdctl	r2,status
    1be8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1bec:	e0fffc17 	ldw	r3,-16(fp)
    1bf0:	00bfff84 	movi	r2,-2
    1bf4:	1884703a 	and	r2,r3,r2
    1bf8:	1001703a 	wrctl	status,r2
  
  return context;
    1bfc:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    1c00:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    1c04:	e0bfff17 	ldw	r2,-4(fp)
    1c08:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    1c0c:	e0bffd17 	ldw	r2,-12(fp)
    1c10:	10800017 	ldw	r2,0(r2)
    1c14:	e0fffd17 	ldw	r3,-12(fp)
    1c18:	18c00117 	ldw	r3,4(r3)
    1c1c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    1c20:	e0bffd17 	ldw	r2,-12(fp)
    1c24:	10800117 	ldw	r2,4(r2)
    1c28:	e0fffd17 	ldw	r3,-12(fp)
    1c2c:	18c00017 	ldw	r3,0(r3)
    1c30:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    1c34:	e0bffd17 	ldw	r2,-12(fp)
    1c38:	e0fffd17 	ldw	r3,-12(fp)
    1c3c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    1c40:	e0bffd17 	ldw	r2,-12(fp)
    1c44:	e0fffd17 	ldw	r3,-12(fp)
    1c48:	10c00015 	stw	r3,0(r2)
    1c4c:	e0bffb17 	ldw	r2,-20(fp)
    1c50:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1c54:	e0bffe17 	ldw	r2,-8(fp)
    1c58:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    1c5c:	e037883a 	mov	sp,fp
    1c60:	df000017 	ldw	fp,0(sp)
    1c64:	dec00104 	addi	sp,sp,4
    1c68:	f800283a 	ret

00001c6c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    1c6c:	defffb04 	addi	sp,sp,-20
    1c70:	dfc00415 	stw	ra,16(sp)
    1c74:	df000315 	stw	fp,12(sp)
    1c78:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    1c7c:	d0a00717 	ldw	r2,-32740(gp)
    1c80:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    1c84:	d0a5f317 	ldw	r2,-26676(gp)
    1c88:	10800044 	addi	r2,r2,1
    1c8c:	d0a5f315 	stw	r2,-26676(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    1c90:	00002e06 	br	1d4c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    1c94:	e0bffd17 	ldw	r2,-12(fp)
    1c98:	10800017 	ldw	r2,0(r2)
    1c9c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    1ca0:	e0bffd17 	ldw	r2,-12(fp)
    1ca4:	10800403 	ldbu	r2,16(r2)
    1ca8:	10803fcc 	andi	r2,r2,255
    1cac:	10000426 	beq	r2,zero,1cc0 <alt_tick+0x54>
    1cb0:	d0a5f317 	ldw	r2,-26676(gp)
    1cb4:	1000021e 	bne	r2,zero,1cc0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    1cb8:	e0bffd17 	ldw	r2,-12(fp)
    1cbc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    1cc0:	e0bffd17 	ldw	r2,-12(fp)
    1cc4:	10800217 	ldw	r2,8(r2)
    1cc8:	d0e5f317 	ldw	r3,-26676(gp)
    1ccc:	18801d36 	bltu	r3,r2,1d44 <alt_tick+0xd8>
    1cd0:	e0bffd17 	ldw	r2,-12(fp)
    1cd4:	10800403 	ldbu	r2,16(r2)
    1cd8:	10803fcc 	andi	r2,r2,255
    1cdc:	1000191e 	bne	r2,zero,1d44 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    1ce0:	e0bffd17 	ldw	r2,-12(fp)
    1ce4:	10800317 	ldw	r2,12(r2)
    1ce8:	e0fffd17 	ldw	r3,-12(fp)
    1cec:	18c00517 	ldw	r3,20(r3)
    1cf0:	1809883a 	mov	r4,r3
    1cf4:	103ee83a 	callr	r2
    1cf8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    1cfc:	e0bfff17 	ldw	r2,-4(fp)
    1d00:	1000031e 	bne	r2,zero,1d10 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    1d04:	e13ffd17 	ldw	r4,-12(fp)
    1d08:	0001bd40 	call	1bd4 <alt_alarm_stop>
    1d0c:	00000d06 	br	1d44 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    1d10:	e0bffd17 	ldw	r2,-12(fp)
    1d14:	10c00217 	ldw	r3,8(r2)
    1d18:	e0bfff17 	ldw	r2,-4(fp)
    1d1c:	1887883a 	add	r3,r3,r2
    1d20:	e0bffd17 	ldw	r2,-12(fp)
    1d24:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    1d28:	e0bffd17 	ldw	r2,-12(fp)
    1d2c:	10c00217 	ldw	r3,8(r2)
    1d30:	d0a5f317 	ldw	r2,-26676(gp)
    1d34:	1880032e 	bgeu	r3,r2,1d44 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    1d38:	e0bffd17 	ldw	r2,-12(fp)
    1d3c:	00c00044 	movi	r3,1
    1d40:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    1d44:	e0bffe17 	ldw	r2,-8(fp)
    1d48:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    1d4c:	e0fffd17 	ldw	r3,-12(fp)
    1d50:	d0a00704 	addi	r2,gp,-32740
    1d54:	18bfcf1e 	bne	r3,r2,1c94 <__alt_mem_Onchip_SRAM_2+0xf7001c94>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    1d58:	0001883a 	nop
}
    1d5c:	e037883a 	mov	sp,fp
    1d60:	dfc00117 	ldw	ra,4(sp)
    1d64:	df000017 	ldw	fp,0(sp)
    1d68:	dec00204 	addi	sp,sp,8
    1d6c:	f800283a 	ret

00001d70 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    1d70:	deffff04 	addi	sp,sp,-4
    1d74:	df000015 	stw	fp,0(sp)
    1d78:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    1d7c:	000170fa 	wrctl	ienable,zero
}
    1d80:	e037883a 	mov	sp,fp
    1d84:	df000017 	ldw	fp,0(sp)
    1d88:	dec00104 	addi	sp,sp,4
    1d8c:	f800283a 	ret

00001d90 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    1d90:	defffa04 	addi	sp,sp,-24
    1d94:	dfc00515 	stw	ra,20(sp)
    1d98:	df000415 	stw	fp,16(sp)
    1d9c:	df000404 	addi	fp,sp,16
    1da0:	e13ffe15 	stw	r4,-8(fp)
    1da4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    1da8:	e0bfff17 	ldw	r2,-4(fp)
    1dac:	10800017 	ldw	r2,0(r2)
    1db0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    1db4:	e13ffe17 	ldw	r4,-8(fp)
    1db8:	000227c0 	call	227c <strlen>
    1dbc:	10800044 	addi	r2,r2,1
    1dc0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    1dc4:	00000d06 	br	1dfc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    1dc8:	e0bffc17 	ldw	r2,-16(fp)
    1dcc:	10c00217 	ldw	r3,8(r2)
    1dd0:	e0bffd17 	ldw	r2,-12(fp)
    1dd4:	1809883a 	mov	r4,r3
    1dd8:	e17ffe17 	ldw	r5,-8(fp)
    1ddc:	100d883a 	mov	r6,r2
    1de0:	00020f40 	call	20f4 <memcmp>
    1de4:	1000021e 	bne	r2,zero,1df0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    1de8:	e0bffc17 	ldw	r2,-16(fp)
    1dec:	00000706 	br	1e0c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    1df0:	e0bffc17 	ldw	r2,-16(fp)
    1df4:	10800017 	ldw	r2,0(r2)
    1df8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    1dfc:	e0fffc17 	ldw	r3,-16(fp)
    1e00:	e0bfff17 	ldw	r2,-4(fp)
    1e04:	18bff01e 	bne	r3,r2,1dc8 <__alt_mem_Onchip_SRAM_2+0xf7001dc8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    1e08:	0005883a 	mov	r2,zero
}
    1e0c:	e037883a 	mov	sp,fp
    1e10:	dfc00117 	ldw	ra,4(sp)
    1e14:	df000017 	ldw	fp,0(sp)
    1e18:	dec00204 	addi	sp,sp,8
    1e1c:	f800283a 	ret

00001e20 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    1e20:	defffb04 	addi	sp,sp,-20
    1e24:	dfc00415 	stw	ra,16(sp)
    1e28:	df000315 	stw	fp,12(sp)
    1e2c:	df000304 	addi	fp,sp,12
    1e30:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    1e34:	00800034 	movhi	r2,0
    1e38:	108f9004 	addi	r2,r2,15936
    1e3c:	10800017 	ldw	r2,0(r2)
    1e40:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    1e44:	00003106 	br	1f0c <alt_find_file+0xec>
  {
    len = strlen(next->name);
    1e48:	e0bffd17 	ldw	r2,-12(fp)
    1e4c:	10800217 	ldw	r2,8(r2)
    1e50:	1009883a 	mov	r4,r2
    1e54:	000227c0 	call	227c <strlen>
    1e58:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    1e5c:	e0bffd17 	ldw	r2,-12(fp)
    1e60:	10c00217 	ldw	r3,8(r2)
    1e64:	e0bffe17 	ldw	r2,-8(fp)
    1e68:	10bfffc4 	addi	r2,r2,-1
    1e6c:	1885883a 	add	r2,r3,r2
    1e70:	10800003 	ldbu	r2,0(r2)
    1e74:	10803fcc 	andi	r2,r2,255
    1e78:	1080201c 	xori	r2,r2,128
    1e7c:	10bfe004 	addi	r2,r2,-128
    1e80:	10800bd8 	cmpnei	r2,r2,47
    1e84:	1000031e 	bne	r2,zero,1e94 <alt_find_file+0x74>
    {
      len -= 1;
    1e88:	e0bffe17 	ldw	r2,-8(fp)
    1e8c:	10bfffc4 	addi	r2,r2,-1
    1e90:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    1e94:	e0bffe17 	ldw	r2,-8(fp)
    1e98:	e0ffff17 	ldw	r3,-4(fp)
    1e9c:	1885883a 	add	r2,r3,r2
    1ea0:	10800003 	ldbu	r2,0(r2)
    1ea4:	10803fcc 	andi	r2,r2,255
    1ea8:	1080201c 	xori	r2,r2,128
    1eac:	10bfe004 	addi	r2,r2,-128
    1eb0:	10800be0 	cmpeqi	r2,r2,47
    1eb4:	1000081e 	bne	r2,zero,1ed8 <alt_find_file+0xb8>
    1eb8:	e0bffe17 	ldw	r2,-8(fp)
    1ebc:	e0ffff17 	ldw	r3,-4(fp)
    1ec0:	1885883a 	add	r2,r3,r2
    1ec4:	10800003 	ldbu	r2,0(r2)
    1ec8:	10803fcc 	andi	r2,r2,255
    1ecc:	1080201c 	xori	r2,r2,128
    1ed0:	10bfe004 	addi	r2,r2,-128
    1ed4:	10000a1e 	bne	r2,zero,1f00 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    1ed8:	e0bffd17 	ldw	r2,-12(fp)
    1edc:	10c00217 	ldw	r3,8(r2)
    1ee0:	e0bffe17 	ldw	r2,-8(fp)
    1ee4:	1809883a 	mov	r4,r3
    1ee8:	e17fff17 	ldw	r5,-4(fp)
    1eec:	100d883a 	mov	r6,r2
    1ef0:	00020f40 	call	20f4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    1ef4:	1000021e 	bne	r2,zero,1f00 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    1ef8:	e0bffd17 	ldw	r2,-12(fp)
    1efc:	00000806 	br	1f20 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
    1f00:	e0bffd17 	ldw	r2,-12(fp)
    1f04:	10800017 	ldw	r2,0(r2)
    1f08:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    1f0c:	e0fffd17 	ldw	r3,-12(fp)
    1f10:	00800034 	movhi	r2,0
    1f14:	108f9004 	addi	r2,r2,15936
    1f18:	18bfcb1e 	bne	r3,r2,1e48 <__alt_mem_Onchip_SRAM_2+0xf7001e48>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    1f1c:	0005883a 	mov	r2,zero
}
    1f20:	e037883a 	mov	sp,fp
    1f24:	dfc00117 	ldw	ra,4(sp)
    1f28:	df000017 	ldw	fp,0(sp)
    1f2c:	dec00204 	addi	sp,sp,8
    1f30:	f800283a 	ret

00001f34 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    1f34:	defffa04 	addi	sp,sp,-24
    1f38:	dfc00515 	stw	ra,20(sp)
    1f3c:	df000415 	stw	fp,16(sp)
    1f40:	dc000315 	stw	r16,12(sp)
    1f44:	df000404 	addi	fp,sp,16
    1f48:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
    1f4c:	00bffa04 	movi	r2,-24
    1f50:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    1f54:	e03ffc15 	stw	zero,-16(fp)
    1f58:	00002106 	br	1fe0 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
    1f5c:	04000034 	movhi	r16,0
    1f60:	840e2704 	addi	r16,r16,14492
    1f64:	e0bffc17 	ldw	r2,-16(fp)
    1f68:	1009883a 	mov	r4,r2
    1f6c:	01400304 	movi	r5,12
    1f70:	00025c80 	call	25c8 <__mulsi3>
    1f74:	8085883a 	add	r2,r16,r2
    1f78:	10800017 	ldw	r2,0(r2)
    1f7c:	1000151e 	bne	r2,zero,1fd4 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
    1f80:	04000034 	movhi	r16,0
    1f84:	840e2704 	addi	r16,r16,14492
    1f88:	e0bffc17 	ldw	r2,-16(fp)
    1f8c:	1009883a 	mov	r4,r2
    1f90:	01400304 	movi	r5,12
    1f94:	00025c80 	call	25c8 <__mulsi3>
    1f98:	8085883a 	add	r2,r16,r2
    1f9c:	e0fffe17 	ldw	r3,-8(fp)
    1fa0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    1fa4:	00800034 	movhi	r2,0
    1fa8:	108f9404 	addi	r2,r2,15952
    1fac:	10c00017 	ldw	r3,0(r2)
    1fb0:	e0bffc17 	ldw	r2,-16(fp)
    1fb4:	1880040e 	bge	r3,r2,1fc8 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
    1fb8:	00800034 	movhi	r2,0
    1fbc:	108f9404 	addi	r2,r2,15952
    1fc0:	e0fffc17 	ldw	r3,-16(fp)
    1fc4:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
    1fc8:	e0bffc17 	ldw	r2,-16(fp)
    1fcc:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    1fd0:	00000606 	br	1fec <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    1fd4:	e0bffc17 	ldw	r2,-16(fp)
    1fd8:	10800044 	addi	r2,r2,1
    1fdc:	e0bffc15 	stw	r2,-16(fp)
    1fe0:	e0bffc17 	ldw	r2,-16(fp)
    1fe4:	10800810 	cmplti	r2,r2,32
    1fe8:	103fdc1e 	bne	r2,zero,1f5c <__alt_mem_Onchip_SRAM_2+0xf7001f5c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    1fec:	e0bffd17 	ldw	r2,-12(fp)
}
    1ff0:	e6ffff04 	addi	sp,fp,-4
    1ff4:	dfc00217 	ldw	ra,8(sp)
    1ff8:	df000117 	ldw	fp,4(sp)
    1ffc:	dc000017 	ldw	r16,0(sp)
    2000:	dec00304 	addi	sp,sp,12
    2004:	f800283a 	ret

00002008 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    2008:	defffe04 	addi	sp,sp,-8
    200c:	df000115 	stw	fp,4(sp)
    2010:	df000104 	addi	fp,sp,4
    2014:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    2018:	e0bfff17 	ldw	r2,-4(fp)
    201c:	10bffe84 	addi	r2,r2,-6
    2020:	10c00428 	cmpgeui	r3,r2,16
    2024:	18001b1e 	bne	r3,zero,2094 <alt_exception_cause_generated_bad_addr+0x8c>
    2028:	1085883a 	add	r2,r2,r2
    202c:	1087883a 	add	r3,r2,r2
    2030:	00800034 	movhi	r2,0
    2034:	10881104 	addi	r2,r2,8260
    2038:	1885883a 	add	r2,r3,r2
    203c:	10800017 	ldw	r2,0(r2)
    2040:	1000683a 	jmp	r2
    2044:	00002084 	movi	zero,130
    2048:	00002084 	movi	zero,130
    204c:	00002094 	movui	zero,130
    2050:	00002094 	movui	zero,130
    2054:	00002094 	movui	zero,130
    2058:	00002084 	movi	zero,130
    205c:	0000208c 	andi	zero,zero,130
    2060:	00002094 	movui	zero,130
    2064:	00002084 	movi	zero,130
    2068:	00002084 	movi	zero,130
    206c:	00002094 	movui	zero,130
    2070:	00002084 	movi	zero,130
    2074:	0000208c 	andi	zero,zero,130
    2078:	00002094 	movui	zero,130
    207c:	00002094 	movui	zero,130
    2080:	00002084 	movi	zero,130
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    2084:	00800044 	movi	r2,1
    2088:	00000306 	br	2098 <alt_exception_cause_generated_bad_addr+0x90>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    208c:	0005883a 	mov	r2,zero
    2090:	00000106 	br	2098 <alt_exception_cause_generated_bad_addr+0x90>

  default:
    return 0;
    2094:	0005883a 	mov	r2,zero
  }
}
    2098:	e037883a 	mov	sp,fp
    209c:	df000017 	ldw	fp,0(sp)
    20a0:	dec00104 	addi	sp,sp,4
    20a4:	f800283a 	ret

000020a8 <atexit>:
    20a8:	200b883a 	mov	r5,r4
    20ac:	000d883a 	mov	r6,zero
    20b0:	0009883a 	mov	r4,zero
    20b4:	000f883a 	mov	r7,zero
    20b8:	00023081 	jmpi	2308 <__register_exitproc>

000020bc <exit>:
    20bc:	defffe04 	addi	sp,sp,-8
    20c0:	000b883a 	mov	r5,zero
    20c4:	dc000015 	stw	r16,0(sp)
    20c8:	dfc00115 	stw	ra,4(sp)
    20cc:	2021883a 	mov	r16,r4
    20d0:	00024240 	call	2424 <__call_exitprocs>
    20d4:	00800034 	movhi	r2,0
    20d8:	108f9904 	addi	r2,r2,15972
    20dc:	11000017 	ldw	r4,0(r2)
    20e0:	20800f17 	ldw	r2,60(r4)
    20e4:	10000126 	beq	r2,zero,20ec <exit+0x30>
    20e8:	103ee83a 	callr	r2
    20ec:	8009883a 	mov	r4,r16
    20f0:	00025f00 	call	25f0 <_exit>

000020f4 <memcmp>:
    20f4:	01c000c4 	movi	r7,3
    20f8:	3980192e 	bgeu	r7,r6,2160 <memcmp+0x6c>
    20fc:	2144b03a 	or	r2,r4,r5
    2100:	11c4703a 	and	r2,r2,r7
    2104:	10000f26 	beq	r2,zero,2144 <memcmp+0x50>
    2108:	21c00003 	ldbu	r7,0(r4)
    210c:	28800003 	ldbu	r2,0(r5)
    2110:	3880151e 	bne	r7,r2,2168 <memcmp+0x74>
    2114:	30ffff84 	addi	r3,r6,-2
    2118:	01bfffc4 	movi	r6,-1
    211c:	00000406 	br	2130 <memcmp+0x3c>
    2120:	21c00003 	ldbu	r7,0(r4)
    2124:	28800003 	ldbu	r2,0(r5)
    2128:	18ffffc4 	addi	r3,r3,-1
    212c:	38800e1e 	bne	r7,r2,2168 <memcmp+0x74>
    2130:	21000044 	addi	r4,r4,1
    2134:	29400044 	addi	r5,r5,1
    2138:	19bff91e 	bne	r3,r6,2120 <__alt_mem_Onchip_SRAM_2+0xf7002120>
    213c:	0005883a 	mov	r2,zero
    2140:	f800283a 	ret
    2144:	20c00017 	ldw	r3,0(r4)
    2148:	28800017 	ldw	r2,0(r5)
    214c:	1880041e 	bne	r3,r2,2160 <memcmp+0x6c>
    2150:	31bfff04 	addi	r6,r6,-4
    2154:	21000104 	addi	r4,r4,4
    2158:	29400104 	addi	r5,r5,4
    215c:	39bff936 	bltu	r7,r6,2144 <__alt_mem_Onchip_SRAM_2+0xf7002144>
    2160:	303fe91e 	bne	r6,zero,2108 <__alt_mem_Onchip_SRAM_2+0xf7002108>
    2164:	003ff506 	br	213c <__alt_mem_Onchip_SRAM_2+0xf700213c>
    2168:	3885c83a 	sub	r2,r7,r2
    216c:	f800283a 	ret

00002170 <memcpy>:
    2170:	00c003c4 	movi	r3,15
    2174:	2005883a 	mov	r2,r4
    2178:	1980372e 	bgeu	r3,r6,2258 <memcpy+0xe8>
    217c:	2146b03a 	or	r3,r4,r5
    2180:	18c000cc 	andi	r3,r3,3
    2184:	1800371e 	bne	r3,zero,2264 <memcpy+0xf4>
    2188:	327ffc04 	addi	r9,r6,-16
    218c:	4812d13a 	srli	r9,r9,4
    2190:	2007883a 	mov	r3,r4
    2194:	280f883a 	mov	r7,r5
    2198:	4808913a 	slli	r4,r9,4
    219c:	1109883a 	add	r4,r2,r4
    21a0:	21000404 	addi	r4,r4,16
    21a4:	3a000017 	ldw	r8,0(r7)
    21a8:	18c00404 	addi	r3,r3,16
    21ac:	39c00404 	addi	r7,r7,16
    21b0:	1a3ffc15 	stw	r8,-16(r3)
    21b4:	3a3ffd17 	ldw	r8,-12(r7)
    21b8:	1a3ffd15 	stw	r8,-12(r3)
    21bc:	3a3ffe17 	ldw	r8,-8(r7)
    21c0:	1a3ffe15 	stw	r8,-8(r3)
    21c4:	3a3fff17 	ldw	r8,-4(r7)
    21c8:	1a3fff15 	stw	r8,-4(r3)
    21cc:	193ff51e 	bne	r3,r4,21a4 <__alt_mem_Onchip_SRAM_2+0xf70021a4>
    21d0:	49000044 	addi	r4,r9,1
    21d4:	2008913a 	slli	r4,r4,4
    21d8:	328003cc 	andi	r10,r6,15
    21dc:	1107883a 	add	r3,r2,r4
    21e0:	290b883a 	add	r5,r5,r4
    21e4:	010000c4 	movi	r4,3
    21e8:	2280212e 	bgeu	r4,r10,2270 <memcpy+0x100>
    21ec:	52bfff04 	addi	r10,r10,-4
    21f0:	5014d0ba 	srli	r10,r10,2
    21f4:	180f883a 	mov	r7,r3
    21f8:	2811883a 	mov	r8,r5
    21fc:	5289883a 	add	r4,r10,r10
    2200:	2109883a 	add	r4,r4,r4
    2204:	21000104 	addi	r4,r4,4
    2208:	1909883a 	add	r4,r3,r4
    220c:	42400017 	ldw	r9,0(r8)
    2210:	39c00104 	addi	r7,r7,4
    2214:	42000104 	addi	r8,r8,4
    2218:	3a7fff15 	stw	r9,-4(r7)
    221c:	393ffb1e 	bne	r7,r4,220c <__alt_mem_Onchip_SRAM_2+0xf700220c>
    2220:	51000044 	addi	r4,r10,1
    2224:	2109883a 	add	r4,r4,r4
    2228:	2109883a 	add	r4,r4,r4
    222c:	318000cc 	andi	r6,r6,3
    2230:	1907883a 	add	r3,r3,r4
    2234:	290b883a 	add	r5,r5,r4
    2238:	30000c26 	beq	r6,zero,226c <memcpy+0xfc>
    223c:	298d883a 	add	r6,r5,r6
    2240:	29c00003 	ldbu	r7,0(r5)
    2244:	18c00044 	addi	r3,r3,1
    2248:	29400044 	addi	r5,r5,1
    224c:	19ffffc5 	stb	r7,-1(r3)
    2250:	29bffb1e 	bne	r5,r6,2240 <__alt_mem_Onchip_SRAM_2+0xf7002240>
    2254:	f800283a 	ret
    2258:	2007883a 	mov	r3,r4
    225c:	303ff71e 	bne	r6,zero,223c <__alt_mem_Onchip_SRAM_2+0xf700223c>
    2260:	00000206 	br	226c <memcpy+0xfc>
    2264:	2007883a 	mov	r3,r4
    2268:	003ff406 	br	223c <__alt_mem_Onchip_SRAM_2+0xf700223c>
    226c:	f800283a 	ret
    2270:	500d883a 	mov	r6,r10
    2274:	303ff11e 	bne	r6,zero,223c <__alt_mem_Onchip_SRAM_2+0xf700223c>
    2278:	003ffc06 	br	226c <__alt_mem_Onchip_SRAM_2+0xf700226c>

0000227c <strlen>:
    227c:	208000cc 	andi	r2,r4,3
    2280:	10001d26 	beq	r2,zero,22f8 <strlen+0x7c>
    2284:	20800007 	ldb	r2,0(r4)
    2288:	10001d26 	beq	r2,zero,2300 <strlen+0x84>
    228c:	2005883a 	mov	r2,r4
    2290:	00000206 	br	229c <strlen+0x20>
    2294:	10c00007 	ldb	r3,0(r2)
    2298:	18001526 	beq	r3,zero,22f0 <strlen+0x74>
    229c:	10800044 	addi	r2,r2,1
    22a0:	10c000cc 	andi	r3,r2,3
    22a4:	183ffb1e 	bne	r3,zero,2294 <__alt_mem_Onchip_SRAM_2+0xf7002294>
    22a8:	10c00017 	ldw	r3,0(r2)
    22ac:	01ffbff4 	movhi	r7,65279
    22b0:	39ffbfc4 	addi	r7,r7,-257
    22b4:	01a02074 	movhi	r6,32897
    22b8:	31a02004 	addi	r6,r6,-32640
    22bc:	00000206 	br	22c8 <strlen+0x4c>
    22c0:	10800104 	addi	r2,r2,4
    22c4:	10c00017 	ldw	r3,0(r2)
    22c8:	19cb883a 	add	r5,r3,r7
    22cc:	00c6303a 	nor	r3,zero,r3
    22d0:	28c6703a 	and	r3,r5,r3
    22d4:	1986703a 	and	r3,r3,r6
    22d8:	183ff926 	beq	r3,zero,22c0 <__alt_mem_Onchip_SRAM_2+0xf70022c0>
    22dc:	10c00007 	ldb	r3,0(r2)
    22e0:	18000326 	beq	r3,zero,22f0 <strlen+0x74>
    22e4:	10800044 	addi	r2,r2,1
    22e8:	10c00007 	ldb	r3,0(r2)
    22ec:	183ffd1e 	bne	r3,zero,22e4 <__alt_mem_Onchip_SRAM_2+0xf70022e4>
    22f0:	1105c83a 	sub	r2,r2,r4
    22f4:	f800283a 	ret
    22f8:	2005883a 	mov	r2,r4
    22fc:	003fea06 	br	22a8 <__alt_mem_Onchip_SRAM_2+0xf70022a8>
    2300:	0005883a 	mov	r2,zero
    2304:	f800283a 	ret

00002308 <__register_exitproc>:
    2308:	defffa04 	addi	sp,sp,-24
    230c:	00800034 	movhi	r2,0
    2310:	108f9904 	addi	r2,r2,15972
    2314:	dc000315 	stw	r16,12(sp)
    2318:	14000017 	ldw	r16,0(r2)
    231c:	dc400415 	stw	r17,16(sp)
    2320:	dfc00515 	stw	ra,20(sp)
    2324:	80805217 	ldw	r2,328(r16)
    2328:	2023883a 	mov	r17,r4
    232c:	10003a26 	beq	r2,zero,2418 <__register_exitproc+0x110>
    2330:	10c00117 	ldw	r3,4(r2)
    2334:	020007c4 	movi	r8,31
    2338:	40c0190e 	bge	r8,r3,23a0 <__register_exitproc+0x98>
    233c:	00800034 	movhi	r2,0
    2340:	10800004 	addi	r2,r2,0
    2344:	1000061e 	bne	r2,zero,2360 <__register_exitproc+0x58>
    2348:	00bfffc4 	movi	r2,-1
    234c:	dfc00517 	ldw	ra,20(sp)
    2350:	dc400417 	ldw	r17,16(sp)
    2354:	dc000317 	ldw	r16,12(sp)
    2358:	dec00604 	addi	sp,sp,24
    235c:	f800283a 	ret
    2360:	01006404 	movi	r4,400
    2364:	d9400015 	stw	r5,0(sp)
    2368:	d9800115 	stw	r6,4(sp)
    236c:	d9c00215 	stw	r7,8(sp)
    2370:	00000000 	call	0 <__alt_mem_SDRAM>
    2374:	d9400017 	ldw	r5,0(sp)
    2378:	d9800117 	ldw	r6,4(sp)
    237c:	d9c00217 	ldw	r7,8(sp)
    2380:	103ff126 	beq	r2,zero,2348 <__alt_mem_Onchip_SRAM_2+0xf7002348>
    2384:	81005217 	ldw	r4,328(r16)
    2388:	10000115 	stw	zero,4(r2)
    238c:	0007883a 	mov	r3,zero
    2390:	11000015 	stw	r4,0(r2)
    2394:	80805215 	stw	r2,328(r16)
    2398:	10006215 	stw	zero,392(r2)
    239c:	10006315 	stw	zero,396(r2)
    23a0:	88000d1e 	bne	r17,zero,23d8 <__register_exitproc+0xd0>
    23a4:	19000084 	addi	r4,r3,2
    23a8:	2109883a 	add	r4,r4,r4
    23ac:	18c00044 	addi	r3,r3,1
    23b0:	2109883a 	add	r4,r4,r4
    23b4:	10c00115 	stw	r3,4(r2)
    23b8:	1105883a 	add	r2,r2,r4
    23bc:	11400015 	stw	r5,0(r2)
    23c0:	0005883a 	mov	r2,zero
    23c4:	dfc00517 	ldw	ra,20(sp)
    23c8:	dc400417 	ldw	r17,16(sp)
    23cc:	dc000317 	ldw	r16,12(sp)
    23d0:	dec00604 	addi	sp,sp,24
    23d4:	f800283a 	ret
    23d8:	18c9883a 	add	r4,r3,r3
    23dc:	2109883a 	add	r4,r4,r4
    23e0:	1109883a 	add	r4,r2,r4
    23e4:	21802215 	stw	r6,136(r4)
    23e8:	01800044 	movi	r6,1
    23ec:	12006217 	ldw	r8,392(r2)
    23f0:	30cc983a 	sll	r6,r6,r3
    23f4:	4190b03a 	or	r8,r8,r6
    23f8:	12006215 	stw	r8,392(r2)
    23fc:	21c04215 	stw	r7,264(r4)
    2400:	01000084 	movi	r4,2
    2404:	893fe71e 	bne	r17,r4,23a4 <__alt_mem_Onchip_SRAM_2+0xf70023a4>
    2408:	11006317 	ldw	r4,396(r2)
    240c:	218cb03a 	or	r6,r4,r6
    2410:	11806315 	stw	r6,396(r2)
    2414:	003fe306 	br	23a4 <__alt_mem_Onchip_SRAM_2+0xf70023a4>
    2418:	80805304 	addi	r2,r16,332
    241c:	80805215 	stw	r2,328(r16)
    2420:	003fc306 	br	2330 <__alt_mem_Onchip_SRAM_2+0xf7002330>

00002424 <__call_exitprocs>:
    2424:	00800034 	movhi	r2,0
    2428:	108f9904 	addi	r2,r2,15972
    242c:	10800017 	ldw	r2,0(r2)
    2430:	defff304 	addi	sp,sp,-52
    2434:	df000b15 	stw	fp,44(sp)
    2438:	d8800015 	stw	r2,0(sp)
    243c:	10805204 	addi	r2,r2,328
    2440:	dd400815 	stw	r21,32(sp)
    2444:	dfc00c15 	stw	ra,48(sp)
    2448:	ddc00a15 	stw	r23,40(sp)
    244c:	dd800915 	stw	r22,36(sp)
    2450:	dd000715 	stw	r20,28(sp)
    2454:	dcc00615 	stw	r19,24(sp)
    2458:	dc800515 	stw	r18,20(sp)
    245c:	dc400415 	stw	r17,16(sp)
    2460:	dc000315 	stw	r16,12(sp)
    2464:	d9000115 	stw	r4,4(sp)
    2468:	2839883a 	mov	fp,r5
    246c:	d8800215 	stw	r2,8(sp)
    2470:	057fffc4 	movi	r21,-1
    2474:	d8800017 	ldw	r2,0(sp)
    2478:	14805217 	ldw	r18,328(r2)
    247c:	90001826 	beq	r18,zero,24e0 <__call_exitprocs+0xbc>
    2480:	ddc00217 	ldw	r23,8(sp)
    2484:	90c00117 	ldw	r3,4(r18)
    2488:	1c3fffc4 	addi	r16,r3,-1
    248c:	80001116 	blt	r16,zero,24d4 <__call_exitprocs+0xb0>
    2490:	18c00044 	addi	r3,r3,1
    2494:	8427883a 	add	r19,r16,r16
    2498:	18c7883a 	add	r3,r3,r3
    249c:	95802204 	addi	r22,r18,136
    24a0:	9ce7883a 	add	r19,r19,r19
    24a4:	18c7883a 	add	r3,r3,r3
    24a8:	b4e7883a 	add	r19,r22,r19
    24ac:	90e3883a 	add	r17,r18,r3
    24b0:	e0001726 	beq	fp,zero,2510 <__call_exitprocs+0xec>
    24b4:	8c87c83a 	sub	r3,r17,r18
    24b8:	b0c7883a 	add	r3,r22,r3
    24bc:	18c01e17 	ldw	r3,120(r3)
    24c0:	1f001326 	beq	r3,fp,2510 <__call_exitprocs+0xec>
    24c4:	843fffc4 	addi	r16,r16,-1
    24c8:	9cffff04 	addi	r19,r19,-4
    24cc:	8c7fff04 	addi	r17,r17,-4
    24d0:	857ff71e 	bne	r16,r21,24b0 <__alt_mem_Onchip_SRAM_2+0xf70024b0>
    24d4:	00800034 	movhi	r2,0
    24d8:	10800004 	addi	r2,r2,0
    24dc:	10002a1e 	bne	r2,zero,2588 <__call_exitprocs+0x164>
    24e0:	dfc00c17 	ldw	ra,48(sp)
    24e4:	df000b17 	ldw	fp,44(sp)
    24e8:	ddc00a17 	ldw	r23,40(sp)
    24ec:	dd800917 	ldw	r22,36(sp)
    24f0:	dd400817 	ldw	r21,32(sp)
    24f4:	dd000717 	ldw	r20,28(sp)
    24f8:	dcc00617 	ldw	r19,24(sp)
    24fc:	dc800517 	ldw	r18,20(sp)
    2500:	dc400417 	ldw	r17,16(sp)
    2504:	dc000317 	ldw	r16,12(sp)
    2508:	dec00d04 	addi	sp,sp,52
    250c:	f800283a 	ret
    2510:	91000117 	ldw	r4,4(r18)
    2514:	88c00017 	ldw	r3,0(r17)
    2518:	213fffc4 	addi	r4,r4,-1
    251c:	24001526 	beq	r4,r16,2574 <__call_exitprocs+0x150>
    2520:	88000015 	stw	zero,0(r17)
    2524:	183fe726 	beq	r3,zero,24c4 <__alt_mem_Onchip_SRAM_2+0xf70024c4>
    2528:	00800044 	movi	r2,1
    252c:	1408983a 	sll	r4,r2,r16
    2530:	91406217 	ldw	r5,392(r18)
    2534:	95000117 	ldw	r20,4(r18)
    2538:	214a703a 	and	r5,r4,r5
    253c:	28000b26 	beq	r5,zero,256c <__call_exitprocs+0x148>
    2540:	91406317 	ldw	r5,396(r18)
    2544:	2148703a 	and	r4,r4,r5
    2548:	20000c1e 	bne	r4,zero,257c <__call_exitprocs+0x158>
    254c:	99400017 	ldw	r5,0(r19)
    2550:	d9000117 	ldw	r4,4(sp)
    2554:	183ee83a 	callr	r3
    2558:	90c00117 	ldw	r3,4(r18)
    255c:	1d3fc51e 	bne	r3,r20,2474 <__alt_mem_Onchip_SRAM_2+0xf7002474>
    2560:	b8c00017 	ldw	r3,0(r23)
    2564:	1cbfd726 	beq	r3,r18,24c4 <__alt_mem_Onchip_SRAM_2+0xf70024c4>
    2568:	003fc206 	br	2474 <__alt_mem_Onchip_SRAM_2+0xf7002474>
    256c:	183ee83a 	callr	r3
    2570:	003ff906 	br	2558 <__alt_mem_Onchip_SRAM_2+0xf7002558>
    2574:	94000115 	stw	r16,4(r18)
    2578:	003fea06 	br	2524 <__alt_mem_Onchip_SRAM_2+0xf7002524>
    257c:	99000017 	ldw	r4,0(r19)
    2580:	183ee83a 	callr	r3
    2584:	003ff406 	br	2558 <__alt_mem_Onchip_SRAM_2+0xf7002558>
    2588:	90c00117 	ldw	r3,4(r18)
    258c:	1800081e 	bne	r3,zero,25b0 <__call_exitprocs+0x18c>
    2590:	90c00017 	ldw	r3,0(r18)
    2594:	18000a26 	beq	r3,zero,25c0 <__call_exitprocs+0x19c>
    2598:	9009883a 	mov	r4,r18
    259c:	b8c00015 	stw	r3,0(r23)
    25a0:	00000000 	call	0 <__alt_mem_SDRAM>
    25a4:	bc800017 	ldw	r18,0(r23)
    25a8:	903fb61e 	bne	r18,zero,2484 <__alt_mem_Onchip_SRAM_2+0xf7002484>
    25ac:	003fcc06 	br	24e0 <__alt_mem_Onchip_SRAM_2+0xf70024e0>
    25b0:	90c00017 	ldw	r3,0(r18)
    25b4:	902f883a 	mov	r23,r18
    25b8:	1825883a 	mov	r18,r3
    25bc:	003ffa06 	br	25a8 <__alt_mem_Onchip_SRAM_2+0xf70025a8>
    25c0:	0007883a 	mov	r3,zero
    25c4:	003ffb06 	br	25b4 <__alt_mem_Onchip_SRAM_2+0xf70025b4>

000025c8 <__mulsi3>:
    25c8:	0005883a 	mov	r2,zero
    25cc:	20000726 	beq	r4,zero,25ec <__mulsi3+0x24>
    25d0:	20c0004c 	andi	r3,r4,1
    25d4:	2008d07a 	srli	r4,r4,1
    25d8:	18000126 	beq	r3,zero,25e0 <__mulsi3+0x18>
    25dc:	1145883a 	add	r2,r2,r5
    25e0:	294b883a 	add	r5,r5,r5
    25e4:	203ffa1e 	bne	r4,zero,25d0 <__alt_mem_Onchip_SRAM_2+0xf70025d0>
    25e8:	f800283a 	ret
    25ec:	f800283a 	ret

000025f0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    25f0:	defffd04 	addi	sp,sp,-12
    25f4:	df000215 	stw	fp,8(sp)
    25f8:	df000204 	addi	fp,sp,8
    25fc:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    2600:	0001883a 	nop
    2604:	e0bfff17 	ldw	r2,-4(fp)
    2608:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    260c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    2610:	10000226 	beq	r2,zero,261c <_exit+0x2c>
    ALT_SIM_FAIL();
    2614:	002af070 	cmpltui	zero,zero,43969
    2618:	00000106 	br	2620 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    261c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    2620:	003fff06 	br	2620 <__alt_mem_Onchip_SRAM_2+0xf7002620>
